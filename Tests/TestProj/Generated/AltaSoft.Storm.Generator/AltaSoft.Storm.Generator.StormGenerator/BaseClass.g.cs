//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Storm ORM Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using AltaSoft.Storm;
using AltaSoft.Storm.Attributes;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using AltaSoft.Storm.Crud;
using AltaSoft.Storm.Interfaces;
using AltaSoft.Storm.Exceptions;
using AltaSoft.Storm.Extensions;

// #pragma warning disable IDE1006
// ReSharper disable InconsistentNaming

namespace TestProj;

// UpdateMode: ChangeTracking
// 0. (dbo.Users - Table, ChangeTracking
public abstract partial record BaseClass : IDataBindableWithKey, ITrackingObject, IEntityComparer<BaseClass>
{
    /// <summary>
    /// Default constructor.
    /// </summary>
    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    public BaseClass()
    {
    }
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

    /// <summary>
    /// Initializes a new instance with the values from the specified DbDataReader and updates the index.
    /// </summary>
    /// <param name="dr">The DbDataReader object containing the data.</param>
    /// <param name="partialLoadFlags">The PartialLoadFlags that used when loading this instance from database.</param>
    /// <param name="idx">The reference to the index.</param>
    #if NET7_0_OR_GREATER
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
    #endif
    protected internal BaseClass(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        UserId = (int)dr.GetInt32(idx++);
        UserIdN = (int?)dr.GetInt32OrNull(idx++);
        Roles = dr.AsXmlOrNull<System.Collections.Generic.List<int>>(idx++);
        DatePair = dr.AsFlatObject<TestProj.DatePair>(ref idx);
    }

    /// <inheritdoc />
    public bool KeyEquals(BaseClass other) => UserId == other.UserId && UserIdN == other.UserIdN;

    /// <inheritdoc />
    public object __GetKeyValue() => (UserId, UserIdN);


    /// <inheritdoc />
    public void __SetAutoIncValue(StormDbDataReader dr, int idx)
    {
    }

    /// <inheritdoc />
    public void __AddDetailRow(StormColumnDef column, object row)
    {
        switch (column.PropertyName)
        {
            case nameof(Lll):
                Lll ??= new(); 
                Lll.Add((string)row);
                break;
        }
    }

    /// <summary>
    /// Represents a set of flags that can be used to specify partial loading options.
    /// </summary>
    [Flags]
    public enum PartialLoadFlags : uint
    {
        Basic = 0,
        Lll = 1, // Detail table
        Roles = 2,
        All = Basic | Lll | Roles,
        AllExceptDetailTables = Basic | Roles
    }

    /// <summary>
    /// Enum representing different options for ordering data.
    /// </summary>
    public enum OrderBy
    {
        UserId = 1,
        UserId_Desc = -1,
        UserIdN = 2,
        UserIdN_Desc = -2,
        DatePair_Date1 = 4,
        DatePair_Date1_Desc = -4,
        DatePair_Date2 = 5,
        DatePair_Date2_Desc = -5
    }

    /// <summary>
    /// Do not order queried data.
    /// </summary>
    public const OrderBy[]? Unordered = default;

    /// <summary>
    /// Order queried data by the OrderBy.UserId and OrderBy.UserIdN columns
    /// </summary>
    public static readonly OrderBy[] OrderByKey = new[] { OrderBy.UserId, OrderBy.UserIdN };

    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public uint? __GetLoadingFlags() => null;

    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public (StormColumnDef column, object? value)[] __GetColumnValues()
    {
        throw new NotImplementedException();
    }


    #region Change Tracking Support

    /// <inheritdoc />
    public abstract (string propertyName, IChangeTrackable? value)[] __TrackableMembers();
    protected bool _isChangeTrackingActive;
    protected ChangeTrackingStateMachine? _changeTrackingStateMachine;
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IsChangeTrackingActive() => _isChangeTrackingActive;
    /// <inheritdoc />
    public void StartChangeTracking() { (_changeTrackingStateMachine ??= new(this)).StartChangeTracking(); _isChangeTrackingActive = true; }
    /// <inheritdoc />
    public void AcceptChanges(bool stopTracking = true) { _changeTrackingStateMachine?.AcceptChanges(stopTracking); _isChangeTrackingActive = !stopTracking; }
    /// <inheritdoc />
    public bool IsDirty() => _changeTrackingStateMachine?.IsDirty() ?? false;
    /// <inheritdoc />
    public IReadOnlySet<string> __GetChangedPropertyNames() => _changeTrackingStateMachine is null ? ChangeTrackingStateMachine.EmptyStringSet : _changeTrackingStateMachine.__GetChangedPropertyNames();
    private void __PropertySet_UserId(ref int newValue, ref int oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("UserId", newValue); }
    private void __PropertySet_UserIdN(ref int? newValue, ref int? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("UserIdN", newValue); }
    private void __PropertySet_Lll(ref AltaSoft.Storm.TrackingList<string>? newValue, ref AltaSoft.Storm.TrackingList<string>? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Lll", newValue); }
    private void __PropertySet_Roles(ref System.Collections.Generic.List<int>? newValue, ref System.Collections.Generic.List<int>? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Roles", newValue); }
    private void __PropertySet_DatePair(ref TestProj.DatePair newValue, ref TestProj.DatePair oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("DatePair", newValue); }

    #endregion Change Tracking Support
}
