//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Storm ORM Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using AltaSoft.Storm.Attributes;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using AltaSoft.Storm;
using AltaSoft.Storm.Crud;
using AltaSoft.Storm.Interfaces;
using AltaSoft.Storm.Exceptions;
using AltaSoft.Storm.Extensions;

// #pragma warning disable IDE1006
// ReSharper disable InconsistentNaming

namespace TestProj;

// UpdateMode: ChangeTracking
// 0. (.TestProj.ChildClasses - Table, ChangeTracking
public partial record ChildClass : IDataBindableWithKey, ITrackingObject, IEntityComparer<ChildClass>
{
    /// <summary>
    /// Default constructor.
    /// </summary>
    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    public ChildClass()
    {
    }
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

    /// <summary>
    /// Initializes a new instance with the values from the specified DbDataReader and updates the index.
    /// </summary>
    /// <param name="dr">The DbDataReader object containing the data.</param>
    /// <param name="partialLoadFlags">The PartialLoadFlags that used when loading this instance from database.</param>
    /// <param name="idx">The reference to the index.</param>
    #if NET7_0_OR_GREATER
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
    #endif
    protected internal ChildClass(StormDbDataReader dr, uint partialLoadFlags, ref int idx) : base(dr, partialLoadFlags, ref idx)
    {
        __loadingFlags = partialLoadFlags;
        ChildId = (int)dr.GetInt32(idx++);
    }

    /// <inheritdoc />
    public bool KeyEquals(ChildClass other) => UserId == other.UserId && UserIdN == other.UserIdN;

    /// <inheritdoc />
    public new object __GetKeyValue() => (UserId, UserIdN);


    /// <inheritdoc />
    new public void __SetAutoIncValue(StormDbDataReader dr, int idx)
    {
    }

    /// <inheritdoc />
    public new void __AddDetailRow(StormColumnDef column, object row)
    {
        switch (column.PropertyName)
        {
            case nameof(Lll):
                Lll ??= new(); 
                Lll.Add((string)row);
                break;
        }
    }

    /// <summary>
    /// Represents a set of flags that can be used to specify partial loading options.
    /// </summary>
    [Flags]
    public new enum PartialLoadFlags : uint
    {
        Basic = 0,
        Lll = 1, // Detail table
        Roles = 2,
        All = Basic | Lll | Roles,
        AllExceptDetailTables = Basic | Roles
    }

    /// <summary>
    /// Enum representing different options for ordering data.
    /// </summary>
    public new enum OrderBy
    {
        UserId = 1,
        UserId_Desc = -1,
        UserIdN = 2,
        UserIdN_Desc = -2,
        DatePair_Date1 = 4,
        DatePair_Date1_Desc = -4,
        DatePair_Date2 = 5,
        DatePair_Date2_Desc = -5,
        ChildId = 6,
        ChildId_Desc = -6
    }

    /// <summary>
    /// Do not order queried data.
    /// </summary>
    public new const OrderBy[]? Unordered = default;

    /// <summary>
    /// Order queried data by the OrderBy.UserId and OrderBy.UserIdN columns
    /// </summary>
    public new static readonly OrderBy[] OrderByKey = new[] { OrderBy.UserId, OrderBy.UserIdN };

    private uint? __loadingFlags;
    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public new uint? __GetLoadingFlags() => __loadingFlags;

    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public new (StormColumnDef column, object? value)[] __GetColumnValues()
    {
        var columnDefs = ChildClassStormController.__columnDefs;

        return [
            (columnDefs[0], UserId),
            (columnDefs[1], UserIdN),
            (columnDefs[2], Lll),
            (columnDefs[3], (object?)Roles),
            (columnDefs[4], (DateTime)DatePair.Date1),
            (columnDefs[5], (DateTime?)DatePair.Date2),
            (columnDefs[6], ChildId)
        ];
    }


    #region Change Tracking Support

    /// <inheritdoc />
    public override (string propertyName, IChangeTrackable? value)[] __TrackableMembers()
    {
        return [
            (nameof(Lll), Lll)
        ];
    }
    private void __PropertySet_ChildId(ref int newValue, ref int oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("ChildId", newValue); }

    #endregion Change Tracking Support
}

/// <summary>
/// 0. StormController for the ChildClass (.TestProj.ChildClasses)
/// </summary>
[StormController(default, "TestProj.ChildClasses", typeof(ChildClass), 0, DbObjectType.Table)]
public sealed class ChildClassStormController : StormControllerBase
{
    public ChildClassStormController(string? schemaName, string objectName, DbObjectType objectType) : base(schemaName, objectName, objectType)
    {
    }

    [System.Runtime.CompilerServices.ModuleInitializer]
    internal static void Initialize()
    {
        StormControllerBase ctrl;
        ctrl = new ChildClassStormController(null, "TestProj.ChildClasses", DbObjectType.Table);
        StormControllerCache.Add(typeof(ChildClass), 0, ctrl);
    }

    /// <inheritdoc />
    public override IDataBindable Create(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        return new ChildClass(dr, partialLoadFlags, ref idx);
    }

    /// <inheritdoc />
    public override object? ReadSingleScalarValue(StormDbDataReader dr, string propertyName, ref int idx)
    {
        return propertyName switch
        {
            nameof(ChildClass.UserId) => (int)dr.GetInt32(idx++),
            nameof(ChildClass.UserIdN) => (int?)dr.GetInt32OrNull(idx++),
            nameof(ChildClass.Roles) => dr.AsXmlOrNull<System.Collections.Generic.List<int>>(idx++),
            nameof(ChildClass.DatePair) => dr.AsFlatObject<TestProj.DatePair>(ref idx),
            nameof(ChildClass.ChildId) => (int)dr.GetInt32(idx++),
            _ => throw new StormException($"'{propertyName}' is not a column of the table")
        };
    }

    /// <inheritdoc />
    public override object CreateDetailRow(StormColumnDef column, StormDbDataReader dr, ref int idx)
    {
        return column.PropertyName switch
        {
            nameof(ChildClass.Lll) => (string)dr.GetAnsiString(idx++),
            _ => throw new StormException($"'{column.PropertyName}' is not a details list")
        };
    }

    /// <summary>
    /// Array of StormColumnDef objects representing the column definitions.
    /// </summary>
    internal static readonly StormColumnDef[] __columnDefs =
    {
        new(nameof(ChildClass.UserId), null, "Id", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(int), null),
        new(nameof(ChildClass.UserIdN), null, "Id", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(int), null),
        new(nameof(ChildClass.Lll), null, "Lll", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 20, 0, 0, SaveAs.DetailTable, 1, true, typeof(string), "TestProj.ChildClassLll", typeof(AltaSoft.Storm.TrackingList<string>), null),
        new(nameof(ChildClass.Roles), null, "Roles", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Xml, -1, 0, 0, SaveAs.Xml, 2, true, null, null, typeof(System.Collections.Generic.List<int>), typeof(System.Collections.Generic.List<int>)),
        new(nameof(ChildClass.DatePair), "Date1", "DP.DT1", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.DateTime, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(TestProj.DatePair),null),
        new(nameof(ChildClass.DatePair), "Date2", "DP.DT2", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.DateTime, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(TestProj.DatePair),null),
        new(nameof(ChildClass.ChildId), null, "ChildId", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(int), null)
    };

    /// <summary>
    /// Array of StormColumnDef objects representing the key column definitions.
    /// </summary>
    internal static readonly StormColumnDef[] __keyColumnDefs = [ __columnDefs[0], __columnDefs[1] ];

    /// <inheritdoc />
    public override StormColumnDef[] ColumnDefs => __columnDefs;

    /// <inheritdoc />
    public override StormColumnDef[] KeyColumnDefs => __keyColumnDefs;

    /// <inheritdoc />
    public override bool HasConcurrencyCheck => false;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAll => (uint)ChildClass.PartialLoadFlags.All;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAllWithoutDetails => (uint)ChildClass.PartialLoadFlags.AllExceptDetailTables;

    /// <inheritdoc />
    public override object __ReadKeyValue(StormDbDataReader dr, ref int idx)
    {
        var userId = (int)dr.GetInt32(idx++);
        var userIdN = (int?)dr.GetInt32OrNull(idx++);
        return (userId, userIdN); 
    }
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override StormColumnDef? __GetAutoIncColumn() => null;

}

/// <summary>
/// StormContext methods
/// </summary>
public static partial class StormContextChildClassExt
{
    /// <summary>
    /// Select row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFrom<ChildClass, ChildClass.OrderBy, ChildClass.PartialLoadFlags> SelectFromChildClass(this StormContext context) => StormCrudFactory.SelectFrom<ChildClass, ChildClass.OrderBy, ChildClass.PartialLoadFlags>(context, 0);
    /// <summary>
    /// Select single row by PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFromSingle<ChildClass, ChildClass.OrderBy, ChildClass.PartialLoadFlags> SelectFromChildClass(this StormContext context, int userId, int userIdN) => StormCrudFactory.SelectFromSingle<ChildClass, ChildClass.OrderBy, ChildClass.PartialLoadFlags>(context, 0, [userId, userIdN]);
    /// <summary>
    /// Delete row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFrom<ChildClass> DeleteFromChildClass(this StormContext context) => StormCrudFactory.DeleteFrom<ChildClass>(context, 0);
    /// <summary>
    /// Delete row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<ChildClass> DeleteFromChildClass(this StormContext context, int userId, int userIdN) => StormCrudFactory.DeleteFromSingle<ChildClass>(context, 0, [userId, userIdN]);
    /// <summary>
    /// Delete row using 1 value
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<ChildClass> DeleteFromChildClass(this StormContext context, ChildClass value) => StormCrudFactory.DeleteFromSingle<ChildClass>(context, 0, value);
    /// <summary>
    /// Delete rows using values
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<ChildClass> DeleteFromChildClass(this StormContext context, IEnumerable<ChildClass> values) => StormCrudFactory.DeleteFromSingle<ChildClass>(context, 0, values);
    /// <summary>
    /// Insert row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IInsertInto<ChildClass> InsertIntoChildClass(this StormContext context) => StormCrudFactory.InsertInto<ChildClass>(context, 0);
    /// <summary>
    /// Update row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFrom<ChildClass> UpdateChildClass(this StormContext context) => StormCrudFactory.UpdateFrom<ChildClass>(context, 0);
    /// <summary>
    /// Update row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFromSingle<ChildClass> UpdateChildClass(this StormContext context, int userId, int userIdN) => StormCrudFactory.UpdateFromSingle<ChildClass>(context, 0, [userId, userIdN]);
    /// <summary>
    /// Merge row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IMergeInto<ChildClass> MergeIntoChildClass(this StormContext context) => StormCrudFactory.MergeInto<ChildClass>(context, 0);
}
