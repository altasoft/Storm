//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Storm ORM Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using System.ComponentModel.DataAnnotations.Schema;
using AltaSoft.Storm.Attributes;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using AltaSoft.Storm;
using AltaSoft.Storm.Crud;
using AltaSoft.Storm.Interfaces;
using AltaSoft.Storm.Exceptions;
using AltaSoft.Storm.Extensions;

#pragma warning disable IDE1006, CS0612, CS8618
// ReSharper disable InconsistentNaming

namespace AltaSoft.Storm.TestModels.AdventureWorks;

// UpdateMode: ChangeTracking
// 0. (Person.Person - Table, ChangeTracking
public partial record Person : IDataBindableWithKey, ITrackingObject, IEntityComparer<Person>
{
    /// <summary>
    /// Default constructor.
    /// </summary>
    public Person()
    {
    }

    /// <summary>
    /// Initializes a new instance with the values from the specified DbDataReader and updates the index.
    /// </summary>
    /// <param name="dr">The DbDataReader object containing the data.</param>
    /// <param name="partialLoadFlags">The PartialLoadFlags that used when loading this instance from database.</param>
    /// <param name="idx">The reference to the index.</param>
    #if NET7_0_OR_GREATER
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
    #endif
    protected internal Person(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        __loadingFlags = partialLoadFlags;
        BusinessEntityID = (int)dr.GetInt32(idx++);
        PersonType = (string)dr.GetStringFixedLength(idx++);
        NameStyle = (bool)dr.GetBoolean(idx++);
        Title = (string?)dr.GetStringOrNull(idx++);
        FirstName = (string)dr.GetString(idx++);
        MiddleName = (string?)dr.GetStringOrNull(idx++);
        LastName = (string)dr.GetString(idx++);
        Suffix = (string?)dr.GetStringOrNull(idx++);
        EmailPromotion = (int)dr.GetInt32(idx++);
        Rowguid = (System.Guid)dr.GetGuid(idx++);
        ModifiedDate = (System.DateTime)dr.GetDateTime2(idx++);
    }

    /// <inheritdoc />
    public bool KeyEquals(Person other) => BusinessEntityID == other.BusinessEntityID;

    /// <inheritdoc />
    public object __GetKeyValue() => (BusinessEntityID);


    /// <inheritdoc />
    public void __SetAutoIncValue(StormDbDataReader dr, int idx)
    {
    }

    /// <inheritdoc />
    public void __AddDetailRow(StormColumnDef column, object row)
    {
        // No master/detail properties
    }

    /// <summary>
    /// Represents a set of flags that can be used to specify partial loading options.
    /// </summary>
    [Flags]
    public enum PartialLoadFlags : uint
    {
        Basic = 0
    }

    /// <summary>
    /// Enum representing different options for ordering data.
    /// </summary>
    public enum OrderBy
    {
        BusinessEntityID = 1,
        BusinessEntityID_Desc = -1,
        PersonType = 2,
        PersonType_Desc = -2,
        NameStyle = 3,
        NameStyle_Desc = -3,
        Title = 4,
        Title_Desc = -4,
        FirstName = 5,
        FirstName_Desc = -5,
        MiddleName = 6,
        MiddleName_Desc = -6,
        LastName = 7,
        LastName_Desc = -7,
        Suffix = 8,
        Suffix_Desc = -8,
        EmailPromotion = 9,
        EmailPromotion_Desc = -9,
        Rowguid = 10,
        Rowguid_Desc = -10,
        ModifiedDate = 11,
        ModifiedDate_Desc = -11
    }

    /// <summary>
    /// Do not order queried data.
    /// </summary>
    public const OrderBy[]? Unordered = default;

    /// <summary>
    /// Order queried data by the OrderBy.BusinessEntityID columns
    /// </summary>
    public static readonly OrderBy[] OrderByKey = new[] { OrderBy.BusinessEntityID };

    private uint? __loadingFlags;
    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public uint? __GetLoadingFlags() => __loadingFlags;

    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public (StormColumnDef column, object? value)[] __GetColumnValues()
    {
        var columnDefs = PersonStormController.__columnDefs;

        return [
            (columnDefs[0], BusinessEntityID),
            (columnDefs[1], PersonType),
            (columnDefs[2], NameStyle),
            (columnDefs[3], Title),
            (columnDefs[4], FirstName),
            (columnDefs[5], MiddleName),
            (columnDefs[6], LastName),
            (columnDefs[7], Suffix),
            (columnDefs[8], EmailPromotion),
            (columnDefs[9], (Guid)Rowguid),
            (columnDefs[10], (DateTime)ModifiedDate)
        ];
    }


    #region Change Tracking Support

    /// <inheritdoc />
    public virtual (string propertyName, IChangeTrackable? value)[] __TrackableMembers()
    {
return [];
    }
    protected bool _isChangeTrackingActive;
    protected ChangeTrackingStateMachine? _changeTrackingStateMachine;
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IsChangeTrackingActive() => _isChangeTrackingActive;
    /// <inheritdoc />
    public void StartChangeTracking() { (_changeTrackingStateMachine ??= new(this)).StartChangeTracking(); _isChangeTrackingActive = true; }
    /// <inheritdoc />
    public void AcceptChanges(bool stopTracking = true) { _changeTrackingStateMachine?.AcceptChanges(stopTracking); _isChangeTrackingActive = !stopTracking; }
    /// <inheritdoc />
    public bool IsDirty() => _changeTrackingStateMachine?.IsDirty() ?? false;
    /// <inheritdoc />
    public IReadOnlySet<string> __GetChangedPropertyNames() => _changeTrackingStateMachine is null ? ChangeTrackingStateMachine.EmptyStringSet : _changeTrackingStateMachine.__GetChangedPropertyNames();
    private void __PropertySet_BusinessEntityID(ref int newValue, ref int oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("BusinessEntityID", newValue); }
    private void __PropertySet_PersonType(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("PersonType", newValue); }
    private void __PropertySet_NameStyle(ref bool newValue, ref bool oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("NameStyle", newValue); }
    private void __PropertySet_Title(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Title", newValue); }
    private void __PropertySet_FirstName(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("FirstName", newValue); }
    private void __PropertySet_MiddleName(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("MiddleName", newValue); }
    private void __PropertySet_LastName(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("LastName", newValue); }
    private void __PropertySet_Suffix(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Suffix", newValue); }
    private void __PropertySet_EmailPromotion(ref int newValue, ref int oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("EmailPromotion", newValue); }
    private void __PropertySet_Rowguid(ref System.Guid newValue, ref System.Guid oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Rowguid", newValue); }
    private void __PropertySet_ModifiedDate(ref System.DateTime newValue, ref System.DateTime oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("ModifiedDate", newValue); }

    #endregion Change Tracking Support
}

/// <summary>
/// 0. StormController for the Person (Person.Person)
/// </summary>
[StormController("Person", "Person", typeof(Person), 0, DbObjectType.Table)]
public sealed class PersonStormController : StormControllerBase
{
    public PersonStormController(string? schemaName, string objectName, DbObjectType objectType) : base(schemaName, objectName, objectType)
    {
    }

    /// <inheritdoc />
    public override Type StormContext => typeof(AdventureWorksStormContext);

    [System.Runtime.CompilerServices.ModuleInitializer]
    internal static void Initialize()
    {
        StormControllerBase ctrl;
        ctrl = new PersonStormController("Person", "Person", DbObjectType.Table);
        StormControllerCache.Add(typeof(Person), 0, ctrl);
    }

    /// <inheritdoc />
    public override IDataBindable Create(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        return new Person(dr, partialLoadFlags, ref idx);
    }

    /// <inheritdoc />
    public override object? ReadSingleScalarValue(StormDbDataReader dr, string propertyName, ref int idx)
    {
        return propertyName switch
        {
            nameof(Person.BusinessEntityID) => (int)dr.GetInt32(idx++),
            nameof(Person.PersonType) => (string)dr.GetStringFixedLength(idx++),
            nameof(Person.NameStyle) => (bool)dr.GetBoolean(idx++),
            nameof(Person.Title) => (string?)dr.GetStringOrNull(idx++),
            nameof(Person.FirstName) => (string)dr.GetString(idx++),
            nameof(Person.MiddleName) => (string?)dr.GetStringOrNull(idx++),
            nameof(Person.LastName) => (string)dr.GetString(idx++),
            nameof(Person.Suffix) => (string?)dr.GetStringOrNull(idx++),
            nameof(Person.EmailPromotion) => (int)dr.GetInt32(idx++),
            nameof(Person.Rowguid) => (System.Guid)dr.GetGuid(idx++),
            nameof(Person.ModifiedDate) => (System.DateTime)dr.GetDateTime2(idx++),
            _ => throw new StormException($"'{propertyName}' is not a column of the table")
        };
    }

    /// <inheritdoc />
    public override object CreateDetailRow(StormColumnDef column, StormDbDataReader dr, ref int idx)
    {
        return column.PropertyName switch
        {
            _ => throw new StormException($"'{column.PropertyName}' is not a details list")
        };
    }

    /// <summary>
    /// Array of StormColumnDef objects representing the column definitions.
    /// </summary>
    internal static readonly StormColumnDef[] __columnDefs =
    {
        new(nameof(Person.BusinessEntityID), null, "BusinessEntityID", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(int), null),
        new(nameof(Person.PersonType), null, "PersonType", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.StringFixedLength, 2, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(Person.NameStyle), null, "NameStyle", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Boolean, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(bool), null),
        new(nameof(Person.Title), null, "Title", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, 8, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(Person.FirstName), null, "FirstName", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, 50, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(Person.MiddleName), null, "MiddleName", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, 50, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(Person.LastName), null, "LastName", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, 50, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(Person.Suffix), null, "Suffix", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, 10, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(Person.EmailPromotion), null, "EmailPromotion", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(int), null),
        new(nameof(Person.Rowguid), null, "rowguid", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Guid, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(System.Guid), null),
        new(nameof(Person.ModifiedDate), null, "ModifiedDate", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.DateTime2, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(System.DateTime), null)
    };

    /// <summary>
    /// Array of StormColumnDef objects representing the key column definitions.
    /// </summary>
    internal static readonly StormColumnDef[][] __keyColumnDefs = [
        [ __columnDefs[0] ] // PK
    ];

    /// <inheritdoc />
    public override StormColumnDef[] ColumnDefs => __columnDefs;

    /// <inheritdoc />
    public override StormColumnDef[][] KeyColumnDefs => __keyColumnDefs;

    /// <inheritdoc />
    public override bool HasConcurrencyCheck => false;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAll => 0;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAllWithoutDetails => 0;

    /// <inheritdoc />
    public override object __ReadKeyValue(StormDbDataReader dr, ref int idx)
    {
        var businessEntityID = (int)dr.GetInt32(idx++);
        return (businessEntityID); 
    }
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override StormColumnDef? __GetAutoIncColumn() => null;

}

/// <summary>
/// StormContext methods
/// </summary>
public static partial class AdventureWorksStormContextPersonExt
{
    /// <summary>
    /// Select row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFrom<Person, Person.OrderBy, Person.PartialLoadFlags> SelectFromPerson(this AdventureWorksStormContext context) => StormCrudFactory.SelectFrom<Person, Person.OrderBy, Person.PartialLoadFlags>(context, 0);
    /// <summary>
    /// Select single row by PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFromSingle<Person, Person.OrderBy, Person.PartialLoadFlags> SelectFromPerson(this AdventureWorksStormContext context, int businessEntityID) => StormCrudFactory.SelectFromSingle<Person, Person.OrderBy, Person.PartialLoadFlags>(context, 0, [businessEntityID], 0);
    /// <summary>
    /// Delete row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFrom<Person> DeleteFromPerson(this AdventureWorksStormContext context) => StormCrudFactory.DeleteFrom<Person>(context, 0);
    /// <summary>
    /// Delete row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<Person> DeleteFromPerson(this AdventureWorksStormContext context, int businessEntityID) => StormCrudFactory.DeleteFromSingle<Person>(context, 0, [businessEntityID], 0);
    /// <summary>
    /// Delete row using 1 value
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<Person> DeleteFromPerson(this AdventureWorksStormContext context, Person value) => StormCrudFactory.DeleteFromSingle<Person>(context, 0, value);
    /// <summary>
    /// Delete rows using values
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<Person> DeleteFromPerson(this AdventureWorksStormContext context, IEnumerable<Person> values) => StormCrudFactory.DeleteFromSingle<Person>(context, 0, values);
    /// <summary>
    /// Insert row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IInsertInto<Person> InsertIntoPerson(this AdventureWorksStormContext context) => StormCrudFactory.InsertInto<Person>(context, 0);
    /// <summary>
    /// Update row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFrom<Person> UpdatePerson(this AdventureWorksStormContext context) => StormCrudFactory.UpdateFrom<Person>(context, 0);
    /// <summary>
    /// Update row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFromSingle<Person> UpdatePerson(this AdventureWorksStormContext context, int businessEntityID) => StormCrudFactory.UpdateFromSingle<Person>(context, 0, [businessEntityID], 0);
    /// <summary>
    /// Merge row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IMergeInto<Person> MergeIntoPerson(this AdventureWorksStormContext context) => StormCrudFactory.MergeInto<Person>(context, 0);
}
