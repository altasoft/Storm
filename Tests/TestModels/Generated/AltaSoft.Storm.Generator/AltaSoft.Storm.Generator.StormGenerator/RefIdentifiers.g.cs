//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Storm ORM Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using AltaSoft.Storm.Attributes;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using AltaSoft.Storm;
using AltaSoft.Storm.Crud;
using AltaSoft.Storm.Interfaces;
using AltaSoft.Storm.Exceptions;
using AltaSoft.Storm.Extensions;

#pragma warning disable IDE1006, CS0612, CS8618
// ReSharper disable InconsistentNaming

namespace AltaSoft.Storm.TestModels;

// UpdateMode: ChangeTracking
// 0. (su.RefIdentifiers - Table, ChangeTracking
public partial record RefIdentifiers : IDataBindableWithKey, ITrackingObject, IEntityComparer<RefIdentifiers>
{
    /// <summary>
    /// Default constructor.
    /// </summary>
    public RefIdentifiers()
    {
    }

    /// <summary>
    /// Initializes a new instance with the values from the specified DbDataReader and updates the index.
    /// </summary>
    /// <param name="dr">The DbDataReader object containing the data.</param>
    /// <param name="partialLoadFlags">The PartialLoadFlags that used when loading this instance from database.</param>
    /// <param name="idx">The reference to the index.</param>
    #if NET7_0_OR_GREATER
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
    #endif
    protected internal RefIdentifiers(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        __loadingFlags = partialLoadFlags;
        RecordKey = (string)dr.GetAnsiString(idx++);
        Eid = (string)dr.GetAnsiString(idx++);
        ParentEid = (string)dr.GetAnsiString(idx++);
        GroupEid = (string)dr.GetAnsiString(idx++);
        EntityType = (string)dr.GetAnsiString(idx++);
        CountryCode = (string)dr.GetAnsiString(idx++);
        PaymentAreaCodes = (string?)dr.GetAnsiStringOrNull(idx++);
        Id = (string)dr.GetAnsiString(idx++);
        IdType = (string)dr.GetAnsiString(idx++);
        IsoClcType = (string?)dr.GetAnsiStringOrNull(idx++);
        IdUsage = (string?)dr.GetAnsiStringOrNull(idx++);
        FinancialType = (string?)dr.GetAnsiStringOrNull(idx++);
        SwiftType = (string?)dr.GetAnsiStringOrNull(idx++);
        SuccessorId = (string?)dr.GetAnsiStringOrNull(idx++);
        DomesticAchId = (string?)dr.GetAnsiStringOrNull(idx++);
        FinPlusBic = (string?)dr.GetAnsiStringOrNull(idx++);
        FinPlusDn = (string?)dr.GetAnsiStringOrNull(idx++);
        IbanId = (string?)dr.GetAnsiStringOrNull(idx++);
        IbanBic = (string?)dr.GetAnsiStringOrNull(idx++);
        Name = (string?)dr.GetAnsiStringOrNull(idx++);
        AlternativeName = (string?)dr.GetAnsiStringOrNull(idx++);
        CountryName = (string)dr.GetAnsiString(idx++);
        Script = (string)dr.GetAnsiString(idx++);
    }

    /// <inheritdoc />
    public bool KeyEquals(RefIdentifiers other) => RecordKey == other.RecordKey;

    /// <inheritdoc />
    public object __GetKeyValue() => (RecordKey);


    /// <inheritdoc />
    public void __SetAutoIncValue(StormDbDataReader dr, int idx)
    {
    }

    /// <inheritdoc />
    public void __AddDetailRow(StormColumnDef column, object row)
    {
        // No master/detail properties
    }

    /// <summary>
    /// Represents a set of flags that can be used to specify partial loading options.
    /// </summary>
    [Flags]
    public enum PartialLoadFlags : uint
    {
        Basic = 0
    }

    /// <summary>
    /// Enum representing different options for ordering data.
    /// </summary>
    public enum OrderBy
    {
        RecordKey = 1,
        RecordKey_Desc = -1,
        Eid = 2,
        Eid_Desc = -2,
        ParentEid = 3,
        ParentEid_Desc = -3,
        GroupEid = 4,
        GroupEid_Desc = -4,
        EntityType = 5,
        EntityType_Desc = -5,
        CountryCode = 6,
        CountryCode_Desc = -6,
        PaymentAreaCodes = 7,
        PaymentAreaCodes_Desc = -7,
        Id = 8,
        Id_Desc = -8,
        IdType = 9,
        IdType_Desc = -9,
        IsoClcType = 10,
        IsoClcType_Desc = -10,
        IdUsage = 11,
        IdUsage_Desc = -11,
        FinancialType = 12,
        FinancialType_Desc = -12,
        SwiftType = 13,
        SwiftType_Desc = -13,
        SuccessorId = 14,
        SuccessorId_Desc = -14,
        DomesticAchId = 15,
        DomesticAchId_Desc = -15,
        FinPlusBic = 16,
        FinPlusBic_Desc = -16,
        FinPlusDn = 17,
        FinPlusDn_Desc = -17,
        IbanId = 18,
        IbanId_Desc = -18,
        IbanBic = 19,
        IbanBic_Desc = -19,
        Name = 20,
        Name_Desc = -20,
        AlternativeName = 21,
        AlternativeName_Desc = -21,
        CountryName = 22,
        CountryName_Desc = -22,
        Script = 23,
        Script_Desc = -23
    }

    /// <summary>
    /// Do not order queried data.
    /// </summary>
    public const OrderBy[]? Unordered = default;

    /// <summary>
    /// Order queried data by the OrderBy.RecordKey columns
    /// </summary>
    public static readonly OrderBy[] OrderByKey = new[] { OrderBy.RecordKey };

    private uint? __loadingFlags;
    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public uint? __GetLoadingFlags() => __loadingFlags;

    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public (StormColumnDef column, object? value)[] __GetColumnValues()
    {
        var columnDefs = RefIdentifiersStormController.__columnDefs;

        return [
            (columnDefs[0], RecordKey),
            (columnDefs[1], Eid),
            (columnDefs[2], ParentEid),
            (columnDefs[3], GroupEid),
            (columnDefs[4], EntityType),
            (columnDefs[5], CountryCode),
            (columnDefs[6], PaymentAreaCodes),
            (columnDefs[7], Id),
            (columnDefs[8], IdType),
            (columnDefs[9], IsoClcType),
            (columnDefs[10], IdUsage),
            (columnDefs[11], FinancialType),
            (columnDefs[12], SwiftType),
            (columnDefs[13], SuccessorId),
            (columnDefs[14], DomesticAchId),
            (columnDefs[15], FinPlusBic),
            (columnDefs[16], FinPlusDn),
            (columnDefs[17], IbanId),
            (columnDefs[18], IbanBic),
            (columnDefs[19], Name),
            (columnDefs[20], AlternativeName),
            (columnDefs[21], CountryName),
            (columnDefs[22], Script)
        ];
    }


    #region Change Tracking Support

    /// <inheritdoc />
    public virtual (string propertyName, IChangeTrackable? value)[] __TrackableMembers()
    {
return [];
    }
    protected bool _isChangeTrackingActive;
    protected ChangeTrackingStateMachine? _changeTrackingStateMachine;
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IsChangeTrackingActive() => _isChangeTrackingActive;
    /// <inheritdoc />
    public void StartChangeTracking() { (_changeTrackingStateMachine ??= new(this)).StartChangeTracking(); _isChangeTrackingActive = true; }
    /// <inheritdoc />
    public void AcceptChanges(bool stopTracking = true) { _changeTrackingStateMachine?.AcceptChanges(stopTracking); _isChangeTrackingActive = !stopTracking; }
    /// <inheritdoc />
    public bool IsDirty() => _changeTrackingStateMachine?.IsDirty() ?? false;
    /// <inheritdoc />
    public IReadOnlySet<string> __GetChangedPropertyNames() => _changeTrackingStateMachine is null ? ChangeTrackingStateMachine.EmptyStringSet : _changeTrackingStateMachine.__GetChangedPropertyNames();
    private void __PropertySet_RecordKey(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("RecordKey", newValue); }
    private void __PropertySet_Eid(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Eid", newValue); }
    private void __PropertySet_ParentEid(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("ParentEid", newValue); }
    private void __PropertySet_GroupEid(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("GroupEid", newValue); }
    private void __PropertySet_EntityType(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("EntityType", newValue); }
    private void __PropertySet_CountryCode(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("CountryCode", newValue); }
    private void __PropertySet_PaymentAreaCodes(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("PaymentAreaCodes", newValue); }
    private void __PropertySet_Id(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Id", newValue); }
    private void __PropertySet_IdType(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("IdType", newValue); }
    private void __PropertySet_IsoClcType(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("IsoClcType", newValue); }
    private void __PropertySet_IdUsage(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("IdUsage", newValue); }
    private void __PropertySet_FinancialType(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("FinancialType", newValue); }
    private void __PropertySet_SwiftType(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("SwiftType", newValue); }
    private void __PropertySet_SuccessorId(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("SuccessorId", newValue); }
    private void __PropertySet_DomesticAchId(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("DomesticAchId", newValue); }
    private void __PropertySet_FinPlusBic(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("FinPlusBic", newValue); }
    private void __PropertySet_FinPlusDn(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("FinPlusDn", newValue); }
    private void __PropertySet_IbanId(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("IbanId", newValue); }
    private void __PropertySet_IbanBic(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("IbanBic", newValue); }
    private void __PropertySet_Name(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Name", newValue); }
    private void __PropertySet_AlternativeName(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("AlternativeName", newValue); }
    private void __PropertySet_CountryName(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("CountryName", newValue); }
    private void __PropertySet_Script(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Script", newValue); }

    #endregion Change Tracking Support
}

/// <summary>
/// 0. StormController for the RefIdentifiers (su.RefIdentifiers)
/// </summary>
[StormController("su", "RefIdentifiers", typeof(RefIdentifiers), 0, DbObjectType.Table)]
public sealed class RefIdentifiersStormController : StormControllerBase
{
    public RefIdentifiersStormController(string? schemaName, string objectName, DbObjectType objectType) : base(schemaName, objectName, objectType)
    {
    }

    /// <inheritdoc />
    public override Type StormContext => typeof(TestStormContext);

    [System.Runtime.CompilerServices.ModuleInitializer]
    internal static void Initialize()
    {
        StormControllerBase ctrl;
        ctrl = new RefIdentifiersStormController("su", "RefIdentifiers", DbObjectType.Table);
        StormControllerCache.Add(typeof(RefIdentifiers), 0, ctrl);
    }

    /// <inheritdoc />
    public override IDataBindable Create(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        return new RefIdentifiers(dr, partialLoadFlags, ref idx);
    }

    /// <inheritdoc />
    public override object? ReadSingleScalarValue(StormDbDataReader dr, string propertyName, ref int idx)
    {
        return propertyName switch
        {
            nameof(RefIdentifiers.RecordKey) => (string)dr.GetAnsiString(idx++),
            nameof(RefIdentifiers.Eid) => (string)dr.GetAnsiString(idx++),
            nameof(RefIdentifiers.ParentEid) => (string)dr.GetAnsiString(idx++),
            nameof(RefIdentifiers.GroupEid) => (string)dr.GetAnsiString(idx++),
            nameof(RefIdentifiers.EntityType) => (string)dr.GetAnsiString(idx++),
            nameof(RefIdentifiers.CountryCode) => (string)dr.GetAnsiString(idx++),
            nameof(RefIdentifiers.PaymentAreaCodes) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.Id) => (string)dr.GetAnsiString(idx++),
            nameof(RefIdentifiers.IdType) => (string)dr.GetAnsiString(idx++),
            nameof(RefIdentifiers.IsoClcType) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.IdUsage) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.FinancialType) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.SwiftType) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.SuccessorId) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.DomesticAchId) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.FinPlusBic) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.FinPlusDn) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.IbanId) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.IbanBic) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.Name) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.AlternativeName) => (string?)dr.GetAnsiStringOrNull(idx++),
            nameof(RefIdentifiers.CountryName) => (string)dr.GetAnsiString(idx++),
            nameof(RefIdentifiers.Script) => (string)dr.GetAnsiString(idx++),
            _ => throw new StormException($"'{propertyName}' is not a column of the table")
        };
    }

    /// <inheritdoc />
    public override object CreateDetailRow(StormColumnDef column, StormDbDataReader dr, ref int idx)
    {
        return column.PropertyName switch
        {
            _ => throw new StormException($"'{column.PropertyName}' is not a details list")
        };
    }

    /// <summary>
    /// Array of StormColumnDef objects representing the column definitions.
    /// </summary>
    internal static readonly StormColumnDef[] __columnDefs =
    {
        new(nameof(RefIdentifiers.RecordKey), null, "RecordKey", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.AnsiString, 12, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.Eid), null, "Eid", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 7, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.ParentEid), null, "ParentEid", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 7, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.GroupEid), null, "GroupEid", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 7, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.EntityType), null, "EntityType", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 2, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.CountryCode), null, "CountryCode", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 2, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.PaymentAreaCodes), null, "PaymentAreaCodes", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 50, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.Id), null, "Id", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 35, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.IdType), null, "IdType", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 20, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.IsoClcType), null, "IsoClcType", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 5, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.IdUsage), null, "IdUsage", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 255, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.FinancialType), null, "FinancialType", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 2, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.SwiftType), null, "SwiftType", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 4, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.SuccessorId), null, "SuccessorId", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 50, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.DomesticAchId), null, "DomesticAchId", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 50, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.FinPlusBic), null, "FinPlusBic", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 11, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.FinPlusDn), null, "FinPlusDn", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 255, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.IbanId), null, "IbanId", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 50, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.IbanBic), null, "IbanBic", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 11, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.Name), null, "Name", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 140, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.AlternativeName), null, "AlternativeName", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 140, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.CountryName), null, "CountryName", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 100, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(RefIdentifiers.Script), null, "Script", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 20, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null)
    };

    /// <summary>
    /// Array of StormColumnDef objects representing the key column definitions.
    /// </summary>
    internal static readonly StormColumnDef[][] __keyColumnDefs = [
        [ __columnDefs[0] ], // PK
        [ __columnDefs[1], __columnDefs[7], __columnDefs[8], __columnDefs[22] ]
    ];

    /// <inheritdoc />
    public override StormColumnDef[] ColumnDefs => __columnDefs;

    /// <inheritdoc />
    public override StormColumnDef[][] KeyColumnDefs => __keyColumnDefs;

    /// <inheritdoc />
    public override bool HasConcurrencyCheck => false;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAll => 0;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAllWithoutDetails => 0;

    /// <inheritdoc />
    public override object __ReadKeyValue(StormDbDataReader dr, ref int idx)
    {
        var recordKey = (string)dr.GetAnsiString(idx++);
        return (recordKey); 
    }
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override StormColumnDef? __GetAutoIncColumn() => null;

}

/// <summary>
/// StormContext methods
/// </summary>
public static partial class TestStormContextRefIdentifiersExt
{
    /// <summary>
    /// Select row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFrom<RefIdentifiers, RefIdentifiers.OrderBy, RefIdentifiers.PartialLoadFlags> SelectFromRefIdentifiers(this TestStormContext context) => StormCrudFactory.SelectFrom<RefIdentifiers, RefIdentifiers.OrderBy, RefIdentifiers.PartialLoadFlags>(context, 0);
    /// <summary>
    /// Select single row by PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFromSingle<RefIdentifiers, RefIdentifiers.OrderBy, RefIdentifiers.PartialLoadFlags> SelectFromRefIdentifiers(this TestStormContext context, string recordKey) => StormCrudFactory.SelectFromSingle<RefIdentifiers, RefIdentifiers.OrderBy, RefIdentifiers.PartialLoadFlags>(context, 0, [recordKey], 0);
    /// <summary>
    /// Select single row using unique index
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFromSingle<RefIdentifiers, RefIdentifiers.OrderBy, RefIdentifiers.PartialLoadFlags> SelectFromRefIdentifiers(this TestStormContext context, string eid, string id, string idType, string script) => StormCrudFactory.SelectFromSingle<RefIdentifiers, RefIdentifiers.OrderBy, RefIdentifiers.PartialLoadFlags>(context, 0, [eid, id, idType, script], 1);
    /// <summary>
    /// Delete row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFrom<RefIdentifiers> DeleteFromRefIdentifiers(this TestStormContext context) => StormCrudFactory.DeleteFrom<RefIdentifiers>(context, 0);
    /// <summary>
    /// Delete row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<RefIdentifiers> DeleteFromRefIdentifiers(this TestStormContext context, string recordKey) => StormCrudFactory.DeleteFromSingle<RefIdentifiers>(context, 0, [recordKey], 0);
    /// <summary>
    /// Delete row using 1 value
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<RefIdentifiers> DeleteFromRefIdentifiers(this TestStormContext context, RefIdentifiers value) => StormCrudFactory.DeleteFromSingle<RefIdentifiers>(context, 0, value);
    /// <summary>
    /// Delete rows using values
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<RefIdentifiers> DeleteFromRefIdentifiers(this TestStormContext context, IEnumerable<RefIdentifiers> values) => StormCrudFactory.DeleteFromSingle<RefIdentifiers>(context, 0, values);
    /// <summary>
    /// Insert row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IInsertInto<RefIdentifiers> InsertIntoRefIdentifiers(this TestStormContext context) => StormCrudFactory.InsertInto<RefIdentifiers>(context, 0);
    /// <summary>
    /// Update row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFrom<RefIdentifiers> UpdateRefIdentifiers(this TestStormContext context) => StormCrudFactory.UpdateFrom<RefIdentifiers>(context, 0);
    /// <summary>
    /// Update row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFromSingle<RefIdentifiers> UpdateRefIdentifiers(this TestStormContext context, string recordKey) => StormCrudFactory.UpdateFromSingle<RefIdentifiers>(context, 0, [recordKey], 0);
    /// <summary>
    /// Merge row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IMergeInto<RefIdentifiers> MergeIntoRefIdentifiers(this TestStormContext context) => StormCrudFactory.MergeInto<RefIdentifiers>(context, 0);
}
