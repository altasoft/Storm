//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Storm ORM Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using AltaSoft.Storm.Attributes;
using AltaSoft.Storm.TestModels.VeryBadNamespace;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using AltaSoft.Storm;
using AltaSoft.Storm.Crud;
using AltaSoft.Storm.Interfaces;
using AltaSoft.Storm.Exceptions;
using AltaSoft.Storm.Extensions;

#pragma warning disable IDE1006, CS0612, CS8618
// ReSharper disable InconsistentNaming

namespace AltaSoft.Storm.TestModels;

// UpdateMode: ChangeTracking
// 0. (dbo.CustomerProperties - Table, ChangeTracking
public partial record CustomerProperty : IDataBindableWithKey, ITrackingObject, IEntityComparer<CustomerProperty>
{
    /// <summary>
    /// Default constructor.
    /// </summary>
    public CustomerProperty()
    {
    }

    /// <summary>
    /// Initializes a new instance with the values from the specified DbDataReader and updates the index.
    /// </summary>
    /// <param name="dr">The DbDataReader object containing the data.</param>
    /// <param name="partialLoadFlags">The PartialLoadFlags that used when loading this instance from database.</param>
    /// <param name="idx">The reference to the index.</param>
    #if NET7_0_OR_GREATER
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
    #endif
    protected internal CustomerProperty(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        __loadingFlags = partialLoadFlags;
        Id = (AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId)(long)dr.GetInt64(idx++);
        Name = (string)dr.GetAnsiString(idx++);
        Value = (string)dr.GetAnsiString(idx++);
    }

    /// <inheritdoc />
    public bool KeyEquals(CustomerProperty other) => Id == other.Id && Name == other.Name;

    /// <inheritdoc />
    public object __GetKeyValue() => (Id, Name);


    /// <inheritdoc />
    public void __SetAutoIncValue(StormDbDataReader dr, int idx)
    {
    }

    /// <inheritdoc />
    public void __AddDetailRow(StormColumnDef column, object row)
    {
        // No master/detail properties
    }

    /// <summary>
    /// Represents a set of flags that can be used to specify partial loading options.
    /// </summary>
    [Flags]
    public enum PartialLoadFlags : uint
    {
        Basic = 0
    }

    /// <summary>
    /// Enum representing different options for ordering data.
    /// </summary>
    public enum OrderBy
    {
        Id = 1,
        Id_Desc = -1,
        Name = 2,
        Name_Desc = -2,
        Value = 3,
        Value_Desc = -3
    }

    /// <summary>
    /// Do not order queried data.
    /// </summary>
    public const OrderBy[]? Unordered = default;

    /// <summary>
    /// Order queried data by the OrderBy.Id and OrderBy.Name columns
    /// </summary>
    public static readonly OrderBy[] OrderByKey = new[] { OrderBy.Id, OrderBy.Name };

    private uint? __loadingFlags;
    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public uint? __GetLoadingFlags() => __loadingFlags;

    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public (StormColumnDef column, object? value)[] __GetColumnValues()
    {
        var columnDefs = CustomerPropertyStormController.__columnDefs;

        return [
            (columnDefs[0], (long)Id),
            (columnDefs[1], Name),
            (columnDefs[2], Value)
        ];
    }


    #region Change Tracking Support

    /// <inheritdoc />
    public virtual (string propertyName, IChangeTrackable? value)[] __TrackableMembers()
    {
return [];
    }
    protected bool _isChangeTrackingActive;
    protected ChangeTrackingStateMachine? _changeTrackingStateMachine;
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IsChangeTrackingActive() => _isChangeTrackingActive;
    /// <inheritdoc />
    public void StartChangeTracking() { (_changeTrackingStateMachine ??= new(this)).StartChangeTracking(); _isChangeTrackingActive = true; }
    /// <inheritdoc />
    public void AcceptChanges(bool stopTracking = true) { _changeTrackingStateMachine?.AcceptChanges(stopTracking); _isChangeTrackingActive = !stopTracking; }
    /// <inheritdoc />
    public bool IsDirty() => _changeTrackingStateMachine?.IsDirty() ?? false;
    /// <inheritdoc />
    public IReadOnlySet<string> __GetChangedPropertyNames() => _changeTrackingStateMachine is null ? ChangeTrackingStateMachine.EmptyStringSet : _changeTrackingStateMachine.__GetChangedPropertyNames();
    private void __PropertySet_Id(ref AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId newValue, ref AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Id", newValue); }
    private void __PropertySet_Name(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Name", newValue); }
    private void __PropertySet_Value(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Value", newValue); }

    #endregion Change Tracking Support
}

/// <summary>
/// 0. StormController for the CustomerProperty (dbo.CustomerProperties)
/// </summary>
[StormController("dbo", "CustomerProperties", typeof(CustomerProperty), 0, DbObjectType.Table)]
public sealed class CustomerPropertyStormController : StormControllerBase
{
    public CustomerPropertyStormController(string? schemaName, string objectName, DbObjectType objectType) : base(schemaName, objectName, objectType)
    {
    }

    /// <inheritdoc />
    public override Type StormContext => typeof(TestStormContext);

    [System.Runtime.CompilerServices.ModuleInitializer]
    internal static void Initialize()
    {
        StormControllerBase ctrl;
        ctrl = new CustomerPropertyStormController("dbo", "CustomerProperties", DbObjectType.Table);
        StormControllerCache.Add(typeof(CustomerProperty), 0, ctrl);
    }

    /// <inheritdoc />
    public override IDataBindable Create(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        return new CustomerProperty(dr, partialLoadFlags, ref idx);
    }

    /// <inheritdoc />
    public override object? ReadSingleScalarValue(StormDbDataReader dr, string propertyName, ref int idx)
    {
        return propertyName switch
        {
            nameof(CustomerProperty.Id) => (AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId)(long)dr.GetInt64(idx++),
            nameof(CustomerProperty.Name) => (string)dr.GetAnsiString(idx++),
            nameof(CustomerProperty.Value) => (string)dr.GetAnsiString(idx++),
            _ => throw new StormException($"'{propertyName}' is not a column of the table")
        };
    }

    /// <inheritdoc />
    public override object CreateDetailRow(StormColumnDef column, StormDbDataReader dr, ref int idx)
    {
        return column.PropertyName switch
        {
            _ => throw new StormException($"'{column.PropertyName}' is not a details list")
        };
    }

    /// <summary>
    /// Array of StormColumnDef objects representing the column definitions.
    /// </summary>
    internal static readonly StormColumnDef[] __columnDefs =
    {
        new(nameof(CustomerProperty.Id), null, "Id", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.Int64, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId), null),
        new(nameof(CustomerProperty.Name), null, "Name", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.AnsiString, 50, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(CustomerProperty.Value), null, "Value", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 50, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null)
    };

    /// <summary>
    /// Array of StormColumnDef objects representing the key column definitions.
    /// </summary>
    internal static readonly StormColumnDef[][] __keyColumnDefs = [
        [ __columnDefs[0], __columnDefs[1] ] // PK
    ];

    /// <inheritdoc />
    public override StormColumnDef[] ColumnDefs => __columnDefs;

    /// <inheritdoc />
    public override StormColumnDef[][] KeyColumnDefs => __keyColumnDefs;

    /// <inheritdoc />
    public override bool HasConcurrencyCheck => false;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAll => 0;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAllWithoutDetails => 0;

    /// <inheritdoc />
    public override object __ReadKeyValue(StormDbDataReader dr, ref int idx)
    {
        var id = (AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId)(long)dr.GetInt64(idx++);
        var name = (string)dr.GetAnsiString(idx++);
        return (id, name); 
    }
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override StormColumnDef? __GetAutoIncColumn() => null;

}

/// <summary>
/// StormContext methods
/// </summary>
public static partial class TestStormContextCustomerPropertyExt
{
    /// <summary>
    /// Select row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFrom<CustomerProperty, CustomerProperty.OrderBy, CustomerProperty.PartialLoadFlags> SelectFromCustomerProperties(this TestStormContext context) => StormCrudFactory.SelectFrom<CustomerProperty, CustomerProperty.OrderBy, CustomerProperty.PartialLoadFlags>(context, 0);
    /// <summary>
    /// Select single row by PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFromSingle<CustomerProperty, CustomerProperty.OrderBy, CustomerProperty.PartialLoadFlags> SelectFromCustomerProperties(this TestStormContext context, AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId id, string name) => StormCrudFactory.SelectFromSingle<CustomerProperty, CustomerProperty.OrderBy, CustomerProperty.PartialLoadFlags>(context, 0, [id, name], 0);
    /// <summary>
    /// Delete row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFrom<CustomerProperty> DeleteFromCustomerProperties(this TestStormContext context) => StormCrudFactory.DeleteFrom<CustomerProperty>(context, 0);
    /// <summary>
    /// Delete row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<CustomerProperty> DeleteFromCustomerProperties(this TestStormContext context, AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId id, string name) => StormCrudFactory.DeleteFromSingle<CustomerProperty>(context, 0, [id, name], 0);
    /// <summary>
    /// Delete row using 1 value
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<CustomerProperty> DeleteFromCustomerProperties(this TestStormContext context, CustomerProperty value) => StormCrudFactory.DeleteFromSingle<CustomerProperty>(context, 0, value);
    /// <summary>
    /// Delete rows using values
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<CustomerProperty> DeleteFromCustomerProperties(this TestStormContext context, IEnumerable<CustomerProperty> values) => StormCrudFactory.DeleteFromSingle<CustomerProperty>(context, 0, values);
    /// <summary>
    /// Insert row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IInsertInto<CustomerProperty> InsertIntoCustomerProperties(this TestStormContext context) => StormCrudFactory.InsertInto<CustomerProperty>(context, 0);
    /// <summary>
    /// Update row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFrom<CustomerProperty> UpdateCustomerProperties(this TestStormContext context) => StormCrudFactory.UpdateFrom<CustomerProperty>(context, 0);
    /// <summary>
    /// Update row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFromSingle<CustomerProperty> UpdateCustomerProperties(this TestStormContext context, AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId id, string name) => StormCrudFactory.UpdateFromSingle<CustomerProperty>(context, 0, [id, name], 0);
    /// <summary>
    /// Merge row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IMergeInto<CustomerProperty> MergeIntoCustomerProperties(this TestStormContext context) => StormCrudFactory.MergeInto<CustomerProperty>(context, 0);
}
