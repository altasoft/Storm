//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Storm ORM Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.Data.Common;
using AltaSoft.Storm.Attributes;
using AltaSoft.Storm.TestModels.VeryBadNamespace;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using AltaSoft.Storm;
using AltaSoft.Storm.Crud;
using AltaSoft.Storm.Interfaces;
using AltaSoft.Storm.Exceptions;
using AltaSoft.Storm.Extensions;
using Microsoft.Data.SqlClient;
using System.Threading.Channels;

#pragma warning disable IDE1006, CS0612, CS8618
// ReSharper disable InconsistentNaming

namespace AltaSoft.Storm.TestModels;

// UpdateMode: ChangeTracking
// 0. (dbo.UsersBulkCopy - Table, ChangeTracking
public partial record UserBulkCopy : IDataBindableWithKey, IConcurrencyCheck, ITrackingObject, IEntityComparer<UserBulkCopy>
{
    /// <summary>
    /// Default constructor.
    /// </summary>
    public UserBulkCopy()
    {
    }

    /// <summary>
    /// Initializes a new instance with the values from the specified DbDataReader and updates the index.
    /// </summary>
    /// <param name="dr">The DbDataReader object containing the data.</param>
    /// <param name="partialLoadFlags">The PartialLoadFlags that used when loading this instance from database.</param>
    /// <param name="idx">The reference to the index.</param>
    #if NET7_0_OR_GREATER
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
    #endif
    protected internal UserBulkCopy(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        __loadingFlags = partialLoadFlags;
        UserId = (AltaSoft.Storm.TestModels.DomainTypes.UserId)(int)dr.GetInt32(idx++);
        BranchId = (short)dr.GetInt16(idx++);
        AutoInc = (int)dr.GetInt32(idx++);
        RowVersion = (AltaSoft.Storm.SqlRowVersion)dr.GetBinary(idx++);
        Version = (int)dr.GetInt32(idx++);
        LoginName = (string)dr.GetAnsiString(idx++);
        FullName = (string?)dr.GetStringOrNull(idx++);
        Roles = dr.AsJsonOrNull<System.Collections.Generic.List<int>>(idx++);
        DatePair = dr.AsFlatObject<AltaSoft.Storm.TestModels.DatePair>(ref idx);
        CustomerId = (AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId)(long)dr.GetInt64(idx++);
        CustomerId2 = (AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId?)(long?)dr.GetInt64OrNull(idx++);
        CurrencyId = (AltaSoft.Storm.TestModels.VeryBadNamespace.CurrencyId)(string)dr.GetAnsiStringFixedLength(idx++);
        TwoValues = dr.AsJsonOrNull<AltaSoft.Storm.TestModels.TwoValues>(idx++);
        UserStatus = (AltaSoft.Storm.TestModels.UserStatus)(int)dr.GetInt32(idx++);
        NullableUserStatus = (AltaSoft.Storm.TestModels.UserStatus?)(int?)dr.GetInt32OrNull(idx++);
        TrackableObject = dr.AsJsonOrNull<AltaSoft.Storm.TestModels.TrackableObject>(idx++);
        BigString = dr.AsStringCompressedOrNull(idx++);

        __saved_RowVersion = RowVersion;
        __saved_Version = Version;
        __saved_DatePair_Date1 = DatePair.Date1;
    }

    private AltaSoft.Storm.SqlRowVersion __saved_RowVersion;
    private int __saved_Version;
    private System.DateOnly __saved_DatePair_Date1;

    /// <inheritdoc />
    public bool KeyEquals(UserBulkCopy other) => UserId == other.UserId && BranchId == other.BranchId;

    /// <inheritdoc />
    public object __GetKeyValue() => (UserId, BranchId);


    /// <inheritdoc />
    public void __SetAutoIncValue(StormDbDataReader dr, int idx)
    {
        AutoInc = (int)dr.GetInt32(idx++);
    }

    /// <inheritdoc />
    public void __AddDetailRow(StormColumnDef column, object row)
    {
        // No master/detail properties
    }

    /// <summary>
    /// Represents a set of flags that can be used to specify partial loading options.
    /// </summary>
    [Flags]
    public enum PartialLoadFlags : uint
    {
        Basic = 0,
        FullName = 1,
        Roles = 2,
        TwoValues = 4,
        TrackableObject = 8,
        All = Basic | FullName | Roles | TwoValues | TrackableObject,
        AllExceptDetailTables = Basic | FullName | Roles | TwoValues | TrackableObject
    }

    /// <summary>
    /// Enum representing different options for ordering data.
    /// </summary>
    public enum OrderBy
    {
        UserId = 1,
        UserId_Desc = -1,
        BranchId = 2,
        BranchId_Desc = -2,
        AutoInc = 3,
        AutoInc_Desc = -3,
        RowVersion = 4,
        RowVersion_Desc = -4,
        Version = 5,
        Version_Desc = -5,
        LoginName = 6,
        LoginName_Desc = -6,
        FullName = 7,
        FullName_Desc = -7,
        DatePair_Date1 = 9,
        DatePair_Date1_Desc = -9,
        DatePair_Date2 = 10,
        DatePair_Date2_Desc = -10,
        CustomerId = 11,
        CustomerId_Desc = -11,
        CustomerId2 = 12,
        CustomerId2_Desc = -12,
        CurrencyId = 13,
        CurrencyId_Desc = -13,
        UserStatus = 15,
        UserStatus_Desc = -15,
        NullableUserStatus = 16,
        NullableUserStatus_Desc = -16
    }

    /// <summary>
    /// Do not order queried data.
    /// </summary>
    public const OrderBy[]? Unordered = default;

    /// <summary>
    /// Order queried data by the OrderBy.UserId and OrderBy.BranchId columns
    /// </summary>
    public static readonly OrderBy[] OrderByKey = new[] { OrderBy.UserId, OrderBy.BranchId };

    private uint? __loadingFlags;
    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public uint? __GetLoadingFlags() => __loadingFlags;

    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public (StormColumnDef column, object? value)[] __GetColumnValues()
    {
        var columnDefs = UserBulkCopyStormController.__columnDefs;

        return [
            (columnDefs[0], (int)UserId),
            (columnDefs[1], BranchId),
            (columnDefs[2], AutoInc),
            (columnDefs[3], (byte[])RowVersion),
            (columnDefs[4], Version),
            (columnDefs[5], LoginName),
            (columnDefs[6], FullName),
            (columnDefs[7], (object?)Roles),
            (columnDefs[8], (DateOnly)DatePair.Date1),
            (columnDefs[9], (DateOnly?)DatePair.Date2),
            (columnDefs[10], (long)CustomerId),
            (columnDefs[11], (long?)CustomerId2),
            (columnDefs[12], (string)CurrencyId),
            (columnDefs[13], (object?)TwoValues),
            (columnDefs[14], (int)UserStatus),
            (columnDefs[15], (int?)NullableUserStatus),
            (columnDefs[16], (object?)TrackableObject),
            (columnDefs[17], BigString)
        ];
    }


    #region Concurrency Support

    /// <inheritdoc />
    public (StormColumnDef column, object? value)[] __ConcurrencyColumnValues()
    {
        var columnDefs = UserBulkCopyStormController.__columnDefs;

        return [
            (columnDefs[3], (byte[])__saved_RowVersion),
            (columnDefs[4], __saved_Version),
            (columnDefs[8], (DateOnly)__saved_DatePair_Date1),
        ];
    }

    #endregion Concurrency Support

    #region Change Tracking Support

    /// <inheritdoc />
    public virtual (string propertyName, IChangeTrackable? value)[] __TrackableMembers()
    {
return [
            (nameof(DatePair), DatePair),
            (nameof(TwoValues), TwoValues),
            (nameof(TrackableObject), TrackableObject)
        ];
    }
    protected bool _isChangeTrackingActive;
    protected ChangeTrackingStateMachine? _changeTrackingStateMachine;
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IsChangeTrackingActive() => _isChangeTrackingActive;
    /// <inheritdoc />
    public void StartChangeTracking() { (_changeTrackingStateMachine ??= new(this)).StartChangeTracking(); _isChangeTrackingActive = true; }
    /// <inheritdoc />
    public void AcceptChanges(bool stopTracking = true) { _changeTrackingStateMachine?.AcceptChanges(stopTracking); _isChangeTrackingActive = !stopTracking; }
    /// <inheritdoc />
    public bool IsDirty() => _changeTrackingStateMachine?.IsDirty() ?? false;
    /// <inheritdoc />
    public IReadOnlySet<string> __GetChangedPropertyNames() => _changeTrackingStateMachine is null ? ChangeTrackingStateMachine.EmptyStringSet : _changeTrackingStateMachine.__GetChangedPropertyNames();
    private void __PropertySet_UserId(ref AltaSoft.Storm.TestModels.DomainTypes.UserId newValue, ref AltaSoft.Storm.TestModels.DomainTypes.UserId oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("UserId", newValue); }
    private void __PropertySet_BranchId(ref short newValue, ref short oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("BranchId", newValue); }
    private void __PropertySet_AutoInc(ref int newValue, ref int oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("AutoInc", newValue); }
    private void __PropertySet_RowVersion(ref AltaSoft.Storm.SqlRowVersion newValue, ref AltaSoft.Storm.SqlRowVersion oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("RowVersion", newValue); }
    private void __PropertySet_Version(ref int newValue, ref int oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Version", newValue); }
    private void __PropertySet_LoginName(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("LoginName", newValue); }
    private void __PropertySet_FullName(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("FullName", newValue); }
    private void __PropertySet_Roles(ref System.Collections.Generic.List<int>? newValue, ref System.Collections.Generic.List<int>? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Roles", newValue); }
    private void __PropertySet_DatePair(ref AltaSoft.Storm.TestModels.DatePair newValue, ref AltaSoft.Storm.TestModels.DatePair oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("DatePair", newValue); }
    private void __PropertySet_CustomerId(ref AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId newValue, ref AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("CustomerId", newValue); }
    private void __PropertySet_CustomerId2(ref AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId? newValue, ref AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("CustomerId2", newValue); }
    private void __PropertySet_CurrencyId(ref AltaSoft.Storm.TestModels.VeryBadNamespace.CurrencyId newValue, ref AltaSoft.Storm.TestModels.VeryBadNamespace.CurrencyId oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("CurrencyId", newValue); }
    private void __PropertySet_TwoValues(ref AltaSoft.Storm.TestModels.TwoValues? newValue, ref AltaSoft.Storm.TestModels.TwoValues? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("TwoValues", newValue); }
    private void __PropertySet_UserStatus(ref AltaSoft.Storm.TestModels.UserStatus newValue, ref AltaSoft.Storm.TestModels.UserStatus oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("UserStatus", newValue); }
    private void __PropertySet_NullableUserStatus(ref AltaSoft.Storm.TestModels.UserStatus? newValue, ref AltaSoft.Storm.TestModels.UserStatus? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("NullableUserStatus", newValue); }
    private void __PropertySet_TrackableObject(ref AltaSoft.Storm.TestModels.TrackableObject? newValue, ref AltaSoft.Storm.TestModels.TrackableObject? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("TrackableObject", newValue); }
    private void __PropertySet_BigString(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("BigString", newValue); }

    #endregion Change Tracking Support
}

/// <summary>
/// 0. StormController for the UserBulkCopy (dbo.UsersBulkCopy)
/// </summary>
[StormController("dbo", "UsersBulkCopy", typeof(UserBulkCopy), 0, DbObjectType.Table)]
public sealed class UserBulkCopyStormController : StormControllerBase
{
    public UserBulkCopyStormController(string? schemaName, string objectName, DbObjectType objectType) : base(schemaName, objectName, objectType)
    {
    }

    /// <inheritdoc />
    public override Type StormContext => typeof(TestStormContext);

    [System.Runtime.CompilerServices.ModuleInitializer]
    internal static void Initialize()
    {
        StormControllerBase ctrl;
        ctrl = new UserBulkCopyStormController("dbo", "UsersBulkCopy", DbObjectType.Table);
        StormControllerCache.Add(typeof(UserBulkCopy), 0, ctrl);
    }

    /// <inheritdoc />
    public override IDataBindable Create(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        return new UserBulkCopy(dr, partialLoadFlags, ref idx);
    }

    /// <inheritdoc />
    public override object? ReadSingleScalarValue(StormDbDataReader dr, string propertyName, ref int idx)
    {
        return propertyName switch
        {
            nameof(UserBulkCopy.UserId) => (AltaSoft.Storm.TestModels.DomainTypes.UserId)(int)dr.GetInt32(idx++),
            nameof(UserBulkCopy.BranchId) => (short)dr.GetInt16(idx++),
            nameof(UserBulkCopy.AutoInc) => (int)dr.GetInt32(idx++),
            nameof(UserBulkCopy.RowVersion) => (AltaSoft.Storm.SqlRowVersion)dr.GetBinary(idx++),
            nameof(UserBulkCopy.Version) => (int)dr.GetInt32(idx++),
            nameof(UserBulkCopy.LoginName) => (string)dr.GetAnsiString(idx++),
            nameof(UserBulkCopy.FullName) => (string?)dr.GetStringOrNull(idx++),
            nameof(UserBulkCopy.Roles) => dr.AsJsonOrNull<System.Collections.Generic.List<int>>(idx++),
            nameof(UserBulkCopy.DatePair) => dr.AsFlatObject<AltaSoft.Storm.TestModels.DatePair>(ref idx),
            nameof(UserBulkCopy.CustomerId) => (AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId)(long)dr.GetInt64(idx++),
            nameof(UserBulkCopy.CustomerId2) => (AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId?)(long?)dr.GetInt64OrNull(idx++),
            nameof(UserBulkCopy.CurrencyId) => (AltaSoft.Storm.TestModels.VeryBadNamespace.CurrencyId)(string)dr.GetAnsiStringFixedLength(idx++),
            nameof(UserBulkCopy.TwoValues) => dr.AsJsonOrNull<AltaSoft.Storm.TestModels.TwoValues>(idx++),
            nameof(UserBulkCopy.UserStatus) => (AltaSoft.Storm.TestModels.UserStatus)(int)dr.GetInt32(idx++),
            nameof(UserBulkCopy.NullableUserStatus) => (AltaSoft.Storm.TestModels.UserStatus?)(int?)dr.GetInt32OrNull(idx++),
            nameof(UserBulkCopy.TrackableObject) => dr.AsJsonOrNull<AltaSoft.Storm.TestModels.TrackableObject>(idx++),
            nameof(UserBulkCopy.BigString) => dr.AsStringCompressedOrNull(idx++),
            _ => throw new StormException($"'{propertyName}' is not a column of the table")
        };
    }

    /// <inheritdoc />
    public override object CreateDetailRow(StormColumnDef column, StormDbDataReader dr, ref int idx)
    {
        return column.PropertyName switch
        {
            _ => throw new StormException($"'{column.PropertyName}' is not a details list")
        };
    }

    /// <summary>
    /// Array of StormColumnDef objects representing the column definitions.
    /// </summary>
    internal static readonly StormColumnDef[] __columnDefs =
    {
        new(nameof(UserBulkCopy.UserId), null, "Id", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(AltaSoft.Storm.TestModels.DomainTypes.UserId), null),
        new(nameof(UserBulkCopy.BranchId), null, "BranchId", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.Int16, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(short), null),
        new(nameof(UserBulkCopy.AutoInc), null, "AutoInc", StormColumnFlags.CanSelect | StormColumnFlags.AutoIncrement, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(int), null),
        new(nameof(UserBulkCopy.RowVersion), null, "RowVersion", StormColumnFlags.CanSelect | StormColumnFlags.ConcurrencyCheck | StormColumnFlags.RowVersion, UnifiedDbType.Binary, 8, 0, 0, SaveAs.Default, 0, false, null, null, typeof(AltaSoft.Storm.SqlRowVersion), null),
        new(nameof(UserBulkCopy.Version), null, "Version", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate | StormColumnFlags.ConcurrencyCheck, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(int), null),
        new(nameof(UserBulkCopy.LoginName), null, "LoginName", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, 20, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(UserBulkCopy.FullName), null, "FullName", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, 100, 0, 0, SaveAs.Default, 1, true, null, null, typeof(string), null),
        new(nameof(UserBulkCopy.Roles), null, "Roles", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Json, -1, 0, 0, SaveAs.Json, 2, true, null, null, typeof(System.Collections.Generic.List<int>), typeof(System.Collections.Generic.List<int>)),
        new(nameof(UserBulkCopy.DatePair), "Date1", "DP.DT1", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate | StormColumnFlags.ConcurrencyCheck, UnifiedDbType.Date, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(AltaSoft.Storm.TestModels.DatePair), null),
        new(nameof(UserBulkCopy.DatePair), "Date2", "DP.DT2", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Date, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(AltaSoft.Storm.TestModels.DatePair), null),
        new(nameof(UserBulkCopy.CustomerId), null, "CustomerId", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int64, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId), null),
        new(nameof(UserBulkCopy.CustomerId2), null, "CustomerId2", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int64, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(AltaSoft.Storm.TestModels.VeryBadNamespace.CustomerId), null),
        new(nameof(UserBulkCopy.CurrencyId), null, "CurrencyId", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiStringFixedLength, 3, 0, 0, SaveAs.Default, 0, false, null, null, typeof(AltaSoft.Storm.TestModels.VeryBadNamespace.CurrencyId), null),
        new(nameof(UserBulkCopy.TwoValues), null, "TwoValues", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Json, 101, 0, 0, SaveAs.Json, 4, true, null, null, typeof(AltaSoft.Storm.TestModels.TwoValues), typeof(AltaSoft.Storm.TestModels.TwoValues)),
        new(nameof(UserBulkCopy.UserStatus), null, "UserStatus", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(AltaSoft.Storm.TestModels.UserStatus), null),
        new(nameof(UserBulkCopy.NullableUserStatus), null, "NullableUserStatus", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(AltaSoft.Storm.TestModels.UserStatus), null),
        new(nameof(UserBulkCopy.TrackableObject), null, "TrackableObject", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Json, -1, 0, 0, SaveAs.Json, 8, true, null, null, typeof(AltaSoft.Storm.TestModels.TrackableObject), typeof(AltaSoft.Storm.TestModels.TrackableObject)),
        new(nameof(UserBulkCopy.BigString), null, "BigString", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.VarBinary, 1000, 0, 0, SaveAs.CompressedString, 0, true, null, null, typeof(string), null)
    };

    /// <summary>
    /// Array of StormColumnDef objects representing the key column definitions.
    /// </summary>
    internal static readonly StormColumnDef[][] __keyColumnDefs = [
        [ __columnDefs[0], __columnDefs[1] ] // PK
    ];

    /// <inheritdoc />
    public override StormColumnDef[] ColumnDefs => __columnDefs;

    /// <inheritdoc />
    public override StormColumnDef[][] KeyColumnDefs => __keyColumnDefs;

    /// <inheritdoc />
    public override bool HasConcurrencyCheck => true;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAll => (uint)UserBulkCopy.PartialLoadFlags.All;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAllWithoutDetails => (uint)UserBulkCopy.PartialLoadFlags.AllExceptDetailTables;

    /// <inheritdoc />
    public override object __ReadKeyValue(StormDbDataReader dr, ref int idx)
    {
        var userId = (AltaSoft.Storm.TestModels.DomainTypes.UserId)(int)dr.GetInt32(idx++);
        var branchId = (short)dr.GetInt16(idx++);
        return (userId, branchId); 
    }
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override StormColumnDef? __GetAutoIncColumn() => __columnDefs[2];

}

/// <summary>
/// StormContext methods
/// </summary>
public static partial class TestStormContextUserBulkCopyExt
{
    /// <summary>
    /// Select row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFrom<UserBulkCopy, UserBulkCopy.OrderBy, UserBulkCopy.PartialLoadFlags> SelectFromUsersBulkCopy(this TestStormContext context) => StormCrudFactory.SelectFrom<UserBulkCopy, UserBulkCopy.OrderBy, UserBulkCopy.PartialLoadFlags>(context, 0);
    /// <summary>
    /// Select single row by PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFromSingle<UserBulkCopy, UserBulkCopy.OrderBy, UserBulkCopy.PartialLoadFlags> SelectFromUsersBulkCopy(this TestStormContext context, AltaSoft.Storm.TestModels.DomainTypes.UserId userId, short branchId) => StormCrudFactory.SelectFromSingle<UserBulkCopy, UserBulkCopy.OrderBy, UserBulkCopy.PartialLoadFlags>(context, 0, [userId, branchId], 0);
    /// <summary>
    /// Delete row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFrom<UserBulkCopy> DeleteFromUsersBulkCopy(this TestStormContext context) => StormCrudFactory.DeleteFrom<UserBulkCopy>(context, 0);
    /// <summary>
    /// Delete row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<UserBulkCopy> DeleteFromUsersBulkCopy(this TestStormContext context, AltaSoft.Storm.TestModels.DomainTypes.UserId userId, short branchId) => StormCrudFactory.DeleteFromSingle<UserBulkCopy>(context, 0, [userId, branchId], 0);
    /// <summary>
    /// Delete row using 1 value
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<UserBulkCopy> DeleteFromUsersBulkCopy(this TestStormContext context, UserBulkCopy value) => StormCrudFactory.DeleteFromSingle<UserBulkCopy>(context, 0, value);
    /// <summary>
    /// Delete rows using values
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<UserBulkCopy> DeleteFromUsersBulkCopy(this TestStormContext context, IEnumerable<UserBulkCopy> values) => StormCrudFactory.DeleteFromSingle<UserBulkCopy>(context, 0, values);
    /// <summary>
    /// Insert row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IInsertInto<UserBulkCopy> InsertIntoUsersBulkCopy(this TestStormContext context) => StormCrudFactory.InsertInto<UserBulkCopy>(context, 0);
    /// <summary>
    /// Update row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFrom<UserBulkCopy> UpdateUsersBulkCopy(this TestStormContext context) => StormCrudFactory.UpdateFrom<UserBulkCopy>(context, 0);
    /// <summary>
    /// Update row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFromSingle<UserBulkCopy> UpdateUsersBulkCopy(this TestStormContext context, AltaSoft.Storm.TestModels.DomainTypes.UserId userId, short branchId) => StormCrudFactory.UpdateFromSingle<UserBulkCopy>(context, 0, [userId, branchId], 0);
    /// <summary>
    /// Merge row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IMergeInto<UserBulkCopy> MergeIntoUsersBulkCopy(this TestStormContext context) => StormCrudFactory.MergeInto<UserBulkCopy>(context, 0);
    /// <summary>
    /// Bulk insert rows
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IBulkInsert<UserBulkCopy> BulkInsertIntoUsersBulkCopy(this TestStormContext context) => StormCrudFactory.BulkInsert<UserBulkCopy>(context, 0);
}
