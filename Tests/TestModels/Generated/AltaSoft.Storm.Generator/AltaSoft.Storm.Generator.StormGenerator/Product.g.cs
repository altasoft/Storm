//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Storm ORM Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using AltaSoft.Storm.Attributes;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using AltaSoft.Storm;
using AltaSoft.Storm.Crud;
using AltaSoft.Storm.Interfaces;
using AltaSoft.Storm.Exceptions;
using AltaSoft.Storm.Extensions;

#pragma warning disable IDE1006, CS0612, CS8618
// ReSharper disable InconsistentNaming

namespace AltaSoft.Storm.TestModels.AdventureWorks;

// UpdateMode: ChangeTracking
// 0. (Production.Product - Table, ChangeTracking
public partial record Product : IDataBindableWithKey, ITrackingObject, IEntityComparer<Product>
{
    /// <summary>
    /// Default constructor.
    /// </summary>
    public Product()
    {
    }

    /// <summary>
    /// Initializes a new instance with the values from the specified DbDataReader and updates the index.
    /// </summary>
    /// <param name="dr">The DbDataReader object containing the data.</param>
    /// <param name="partialLoadFlags">The PartialLoadFlags that used when loading this instance from database.</param>
    /// <param name="idx">The reference to the index.</param>
    #if NET7_0_OR_GREATER
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
    #endif
    protected internal Product(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        __loadingFlags = partialLoadFlags;
        ProductID = (int)dr.GetInt32(idx++);
        Name = (string)dr.GetString(idx++);
        ProductNumber = (string)dr.GetString(idx++);
        MakeFlag = (bool)dr.GetBoolean(idx++);
        FinishedGoodsFlag = (bool)dr.GetBoolean(idx++);
        Color = (string?)dr.GetStringOrNull(idx++);
        SafetyStockLevel = (short)dr.GetInt16(idx++);
        ReorderPoint = (short)dr.GetInt16(idx++);
        StandardCost = (decimal)dr.GetDecimal(idx++);
        ListPrice = (decimal)dr.GetDecimal(idx++);
        Size = (string?)dr.GetStringOrNull(idx++);
        SizeUnitMeasureCode = (string?)dr.GetStringFixedLengthOrNull(idx++);
        WeightUnitMeasureCode = (string?)dr.GetStringFixedLengthOrNull(idx++);
        Weight = (decimal?)dr.GetDecimalOrNull(idx++);
        DaysToManufacture = (int)dr.GetInt32(idx++);
        ProductLine = (string?)dr.GetStringFixedLengthOrNull(idx++);
        Class = (string?)dr.GetStringFixedLengthOrNull(idx++);
        Style = (string?)dr.GetStringFixedLengthOrNull(idx++);
        ProductSubcategoryID = (int?)dr.GetInt32OrNull(idx++);
        ProductModelID = (int?)dr.GetInt32OrNull(idx++);
        SellStartDate = (System.DateTime)dr.GetLocalDateTime(idx++);
        SellEndDate = (System.DateTime?)dr.GetDateTime2OrNull(idx++);
        DiscontinuedDate = (System.DateTime?)dr.GetDateTime2OrNull(idx++);
        Rowguid = (System.Guid)dr.GetGuid(idx++);
        ModifiedDate = (System.DateTime)dr.GetDateTime2(idx++);
    }

    /// <inheritdoc />
    public bool KeyEquals(Product other) => ProductID == other.ProductID && Name == other.Name && ProductNumber == other.ProductNumber && Rowguid == other.Rowguid;

    /// <inheritdoc />
    public object __GetKeyValue() => (ProductID, Name, ProductNumber, Rowguid);


    /// <inheritdoc />
    public void __SetAutoIncValue(StormDbDataReader dr, int idx)
    {
        ProductID = (int)dr.GetInt32(idx++);
    }

    /// <inheritdoc />
    public void __AddDetailRow(StormColumnDef column, object row)
    {
        // No master/detail properties
    }

    /// <summary>
    /// Represents a set of flags that can be used to specify partial loading options.
    /// </summary>
    [Flags]
    public enum PartialLoadFlags : uint
    {
        Basic = 0
    }

    /// <summary>
    /// Enum representing different options for ordering data.
    /// </summary>
    public enum OrderBy
    {
        ProductID = 1,
        ProductID_Desc = -1,
        Name = 2,
        Name_Desc = -2,
        ProductNumber = 3,
        ProductNumber_Desc = -3,
        MakeFlag = 4,
        MakeFlag_Desc = -4,
        FinishedGoodsFlag = 5,
        FinishedGoodsFlag_Desc = -5,
        Color = 6,
        Color_Desc = -6,
        SafetyStockLevel = 7,
        SafetyStockLevel_Desc = -7,
        ReorderPoint = 8,
        ReorderPoint_Desc = -8,
        StandardCost = 9,
        StandardCost_Desc = -9,
        ListPrice = 10,
        ListPrice_Desc = -10,
        Size = 11,
        Size_Desc = -11,
        SizeUnitMeasureCode = 12,
        SizeUnitMeasureCode_Desc = -12,
        WeightUnitMeasureCode = 13,
        WeightUnitMeasureCode_Desc = -13,
        Weight = 14,
        Weight_Desc = -14,
        DaysToManufacture = 15,
        DaysToManufacture_Desc = -15,
        ProductLine = 16,
        ProductLine_Desc = -16,
        Class = 17,
        Class_Desc = -17,
        Style = 18,
        Style_Desc = -18,
        ProductSubcategoryID = 19,
        ProductSubcategoryID_Desc = -19,
        ProductModelID = 20,
        ProductModelID_Desc = -20,
        SellStartDate = 21,
        SellStartDate_Desc = -21,
        SellEndDate = 22,
        SellEndDate_Desc = -22,
        DiscontinuedDate = 23,
        DiscontinuedDate_Desc = -23,
        Rowguid = 24,
        Rowguid_Desc = -24,
        ModifiedDate = 25,
        ModifiedDate_Desc = -25
    }

    /// <summary>
    /// Do not order queried data.
    /// </summary>
    public const OrderBy[]? Unordered = default;

    /// <summary>
    /// Order queried data by the OrderBy.ProductID and OrderBy.Name and OrderBy.ProductNumber and OrderBy.Rowguid columns
    /// </summary>
    public static readonly OrderBy[] OrderByKey = new[] { OrderBy.ProductID, OrderBy.Name, OrderBy.ProductNumber, OrderBy.Rowguid };

    private uint? __loadingFlags;
    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public uint? __GetLoadingFlags() => __loadingFlags;

    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public (StormColumnDef column, object? value)[] __GetColumnValues()
    {
        var columnDefs = ProductStormController.__columnDefs;

        return [
            (columnDefs[0], ProductID),
            (columnDefs[1], Name),
            (columnDefs[2], ProductNumber),
            (columnDefs[3], MakeFlag),
            (columnDefs[4], FinishedGoodsFlag),
            (columnDefs[5], Color),
            (columnDefs[6], SafetyStockLevel),
            (columnDefs[7], ReorderPoint),
            (columnDefs[8], StandardCost),
            (columnDefs[9], ListPrice),
            (columnDefs[10], Size),
            (columnDefs[11], SizeUnitMeasureCode),
            (columnDefs[12], WeightUnitMeasureCode),
            (columnDefs[13], Weight),
            (columnDefs[14], DaysToManufacture),
            (columnDefs[15], ProductLine),
            (columnDefs[16], Class),
            (columnDefs[17], Style),
            (columnDefs[18], ProductSubcategoryID),
            (columnDefs[19], ProductModelID),
            (columnDefs[20], (DateTime)SellStartDate),
            (columnDefs[21], (DateTime?)SellEndDate),
            (columnDefs[22], (DateTime?)DiscontinuedDate),
            (columnDefs[23], (Guid)Rowguid),
            (columnDefs[24], (DateTime)ModifiedDate)
        ];
    }


    #region Change Tracking Support

    /// <inheritdoc />
    public virtual (string propertyName, IChangeTrackable? value)[] __TrackableMembers()
    {
return [];
    }
    protected bool _isChangeTrackingActive;
    protected ChangeTrackingStateMachine? _changeTrackingStateMachine;
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IsChangeTrackingActive() => _isChangeTrackingActive;
    /// <inheritdoc />
    public void StartChangeTracking() { (_changeTrackingStateMachine ??= new(this)).StartChangeTracking(); _isChangeTrackingActive = true; }
    /// <inheritdoc />
    public void AcceptChanges(bool stopTracking = true) { _changeTrackingStateMachine?.AcceptChanges(stopTracking); _isChangeTrackingActive = !stopTracking; }
    /// <inheritdoc />
    public bool IsDirty() => _changeTrackingStateMachine?.IsDirty() ?? false;
    /// <inheritdoc />
    public IReadOnlySet<string> __GetChangedPropertyNames() => _changeTrackingStateMachine is null ? ChangeTrackingStateMachine.EmptyStringSet : _changeTrackingStateMachine.__GetChangedPropertyNames();
    private void __PropertySet_ProductID(ref int newValue, ref int oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("ProductID", newValue); }
    private void __PropertySet_Name(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Name", newValue); }
    private void __PropertySet_ProductNumber(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("ProductNumber", newValue); }
    private void __PropertySet_MakeFlag(ref bool newValue, ref bool oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("MakeFlag", newValue); }
    private void __PropertySet_FinishedGoodsFlag(ref bool newValue, ref bool oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("FinishedGoodsFlag", newValue); }
    private void __PropertySet_Color(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Color", newValue); }
    private void __PropertySet_SafetyStockLevel(ref short newValue, ref short oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("SafetyStockLevel", newValue); }
    private void __PropertySet_ReorderPoint(ref short newValue, ref short oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("ReorderPoint", newValue); }
    private void __PropertySet_StandardCost(ref decimal newValue, ref decimal oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("StandardCost", newValue); }
    private void __PropertySet_ListPrice(ref decimal newValue, ref decimal oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("ListPrice", newValue); }
    private void __PropertySet_Size(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Size", newValue); }
    private void __PropertySet_SizeUnitMeasureCode(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("SizeUnitMeasureCode", newValue); }
    private void __PropertySet_WeightUnitMeasureCode(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("WeightUnitMeasureCode", newValue); }
    private void __PropertySet_Weight(ref decimal? newValue, ref decimal? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Weight", newValue); }
    private void __PropertySet_DaysToManufacture(ref int newValue, ref int oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("DaysToManufacture", newValue); }
    private void __PropertySet_ProductLine(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("ProductLine", newValue); }
    private void __PropertySet_Class(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Class", newValue); }
    private void __PropertySet_Style(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Style", newValue); }
    private void __PropertySet_ProductSubcategoryID(ref int? newValue, ref int? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("ProductSubcategoryID", newValue); }
    private void __PropertySet_ProductModelID(ref int? newValue, ref int? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("ProductModelID", newValue); }
    private void __PropertySet_SellStartDate(ref System.DateTime newValue, ref System.DateTime oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("SellStartDate", newValue); }
    private void __PropertySet_SellEndDate(ref System.DateTime? newValue, ref System.DateTime? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("SellEndDate", newValue); }
    private void __PropertySet_DiscontinuedDate(ref System.DateTime? newValue, ref System.DateTime? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("DiscontinuedDate", newValue); }
    private void __PropertySet_Rowguid(ref System.Guid newValue, ref System.Guid oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Rowguid", newValue); }
    private void __PropertySet_ModifiedDate(ref System.DateTime newValue, ref System.DateTime oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("ModifiedDate", newValue); }

    #endregion Change Tracking Support
}

/// <summary>
/// 0. StormController for the Product (Production.Product)
/// </summary>
[StormController("Production", "Product", typeof(Product), 0, DbObjectType.Table)]
public sealed class ProductStormController : StormControllerBase
{
    public ProductStormController(string? schemaName, string objectName, DbObjectType objectType) : base(schemaName, objectName, objectType)
    {
    }

    /// <inheritdoc />
    public override Type StormContext => typeof(AdventureWorksStormContext);

    [System.Runtime.CompilerServices.ModuleInitializer]
    internal static void Initialize()
    {
        StormControllerBase ctrl;
        ctrl = new ProductStormController("Production", "Product", DbObjectType.Table);
        StormControllerCache.Add(typeof(Product), 0, ctrl);
    }

    /// <inheritdoc />
    public override IDataBindable Create(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        return new Product(dr, partialLoadFlags, ref idx);
    }

    /// <inheritdoc />
    public override object? ReadSingleScalarValue(StormDbDataReader dr, string propertyName, ref int idx)
    {
        return propertyName switch
        {
            nameof(Product.ProductID) => (int)dr.GetInt32(idx++),
            nameof(Product.Name) => (string)dr.GetString(idx++),
            nameof(Product.ProductNumber) => (string)dr.GetString(idx++),
            nameof(Product.MakeFlag) => (bool)dr.GetBoolean(idx++),
            nameof(Product.FinishedGoodsFlag) => (bool)dr.GetBoolean(idx++),
            nameof(Product.Color) => (string?)dr.GetStringOrNull(idx++),
            nameof(Product.SafetyStockLevel) => (short)dr.GetInt16(idx++),
            nameof(Product.ReorderPoint) => (short)dr.GetInt16(idx++),
            nameof(Product.StandardCost) => (decimal)dr.GetDecimal(idx++),
            nameof(Product.ListPrice) => (decimal)dr.GetDecimal(idx++),
            nameof(Product.Size) => (string?)dr.GetStringOrNull(idx++),
            nameof(Product.SizeUnitMeasureCode) => (string?)dr.GetStringFixedLengthOrNull(idx++),
            nameof(Product.WeightUnitMeasureCode) => (string?)dr.GetStringFixedLengthOrNull(idx++),
            nameof(Product.Weight) => (decimal?)dr.GetDecimalOrNull(idx++),
            nameof(Product.DaysToManufacture) => (int)dr.GetInt32(idx++),
            nameof(Product.ProductLine) => (string?)dr.GetStringFixedLengthOrNull(idx++),
            nameof(Product.Class) => (string?)dr.GetStringFixedLengthOrNull(idx++),
            nameof(Product.Style) => (string?)dr.GetStringFixedLengthOrNull(idx++),
            nameof(Product.ProductSubcategoryID) => (int?)dr.GetInt32OrNull(idx++),
            nameof(Product.ProductModelID) => (int?)dr.GetInt32OrNull(idx++),
            nameof(Product.SellStartDate) => (System.DateTime)dr.GetLocalDateTime(idx++),
            nameof(Product.SellEndDate) => (System.DateTime?)dr.GetDateTime2OrNull(idx++),
            nameof(Product.DiscontinuedDate) => (System.DateTime?)dr.GetDateTime2OrNull(idx++),
            nameof(Product.Rowguid) => (System.Guid)dr.GetGuid(idx++),
            nameof(Product.ModifiedDate) => (System.DateTime)dr.GetDateTime2(idx++),
            _ => throw new StormException($"'{propertyName}' is not a column of the table")
        };
    }

    /// <inheritdoc />
    public override object CreateDetailRow(StormColumnDef column, StormDbDataReader dr, ref int idx)
    {
        return column.PropertyName switch
        {
            _ => throw new StormException($"'{column.PropertyName}' is not a details list")
        };
    }

    /// <summary>
    /// Array of StormColumnDef objects representing the column definitions.
    /// </summary>
    internal static readonly StormColumnDef[] __columnDefs =
    {
        new(nameof(Product.ProductID), null, "ProductID", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.AutoIncrement, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(int), null),
        new(nameof(Product.Name), null, "Name", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.String, 50, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(Product.ProductNumber), null, "ProductNumber", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.String, 25, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(Product.MakeFlag), null, "MakeFlag", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Boolean, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(bool), null),
        new(nameof(Product.FinishedGoodsFlag), null, "FinishedGoodsFlag", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Boolean, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(bool), null),
        new(nameof(Product.Color), null, "Color", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, 15, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(Product.SafetyStockLevel), null, "SafetyStockLevel", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int16, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(short), null),
        new(nameof(Product.ReorderPoint), null, "ReorderPoint", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int16, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(short), null),
        new(nameof(Product.StandardCost), null, "StandardCost", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Decimal, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(decimal), null),
        new(nameof(Product.ListPrice), null, "ListPrice", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Decimal, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(decimal), null),
        new(nameof(Product.Size), null, "Size", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, 5, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(Product.SizeUnitMeasureCode), null, "SizeUnitMeasureCode", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.StringFixedLength, 3, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(Product.WeightUnitMeasureCode), null, "WeightUnitMeasureCode", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.StringFixedLength, 3, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(Product.Weight), null, "Weight", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Decimal, 0, 8, 2, SaveAs.Default, 0, true, null, null, typeof(decimal), null),
        new(nameof(Product.DaysToManufacture), null, "DaysToManufacture", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(int), null),
        new(nameof(Product.ProductLine), null, "ProductLine", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.StringFixedLength, 2, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(Product.Class), null, "Class", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.StringFixedLength, 2, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(Product.Style), null, "Style", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.StringFixedLength, 2, 0, 0, SaveAs.Default, 0, true, null, null, typeof(string), null),
        new(nameof(Product.ProductSubcategoryID), null, "ProductSubcategoryID", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(int), null),
        new(nameof(Product.ProductModelID), null, "ProductModelID", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(int), null),
        new(nameof(Product.SellStartDate), null, "SellStartDate", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.DateTime, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(System.DateTime), null),
        new(nameof(Product.SellEndDate), null, "SellEndDate", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.DateTime2, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(System.DateTime), null),
        new(nameof(Product.DiscontinuedDate), null, "DiscontinuedDate", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.DateTime2, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(System.DateTime), null),
        new(nameof(Product.Rowguid), null, "rowguid", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.Guid, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(System.Guid), null),
        new(nameof(Product.ModifiedDate), null, "ModifiedDate", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.DateTime2, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(System.DateTime), null)
    };

    /// <summary>
    /// Array of StormColumnDef objects representing the key column definitions.
    /// </summary>
    internal static readonly StormColumnDef[][] __keyColumnDefs = [
        [ __columnDefs[0], __columnDefs[1], __columnDefs[2], __columnDefs[23] ] // PK
    ];

    /// <inheritdoc />
    public override StormColumnDef[] ColumnDefs => __columnDefs;

    /// <inheritdoc />
    public override StormColumnDef[][] KeyColumnDefs => __keyColumnDefs;

    /// <inheritdoc />
    public override bool HasConcurrencyCheck => false;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAll => 0;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAllWithoutDetails => 0;

    /// <inheritdoc />
    public override object __ReadKeyValue(StormDbDataReader dr, ref int idx)
    {
        var productID = (int)dr.GetInt32(idx++);
        var name = (string)dr.GetString(idx++);
        var productNumber = (string)dr.GetString(idx++);
        var rowguid = (System.Guid)dr.GetGuid(idx++);
        return (productID, name, productNumber, rowguid); 
    }
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override StormColumnDef? __GetAutoIncColumn() => __columnDefs[0];

}

/// <summary>
/// StormContext methods
/// </summary>
public static partial class AdventureWorksStormContextProductExt
{
    /// <summary>
    /// Select row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFrom<Product, Product.OrderBy, Product.PartialLoadFlags> SelectFromProduct(this AdventureWorksStormContext context) => StormCrudFactory.SelectFrom<Product, Product.OrderBy, Product.PartialLoadFlags>(context, 0);
    /// <summary>
    /// Select single row by PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFromSingle<Product, Product.OrderBy, Product.PartialLoadFlags> SelectFromProduct(this AdventureWorksStormContext context, int productID, string name, string productNumber, System.Guid rowguid) => StormCrudFactory.SelectFromSingle<Product, Product.OrderBy, Product.PartialLoadFlags>(context, 0, [productID, name, productNumber, rowguid], 0);
    /// <summary>
    /// Delete row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFrom<Product> DeleteFromProduct(this AdventureWorksStormContext context) => StormCrudFactory.DeleteFrom<Product>(context, 0);
    /// <summary>
    /// Delete row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<Product> DeleteFromProduct(this AdventureWorksStormContext context, int productID, string name, string productNumber, System.Guid rowguid) => StormCrudFactory.DeleteFromSingle<Product>(context, 0, [productID, name, productNumber, rowguid], 0);
    /// <summary>
    /// Delete row using 1 value
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<Product> DeleteFromProduct(this AdventureWorksStormContext context, Product value) => StormCrudFactory.DeleteFromSingle<Product>(context, 0, value);
    /// <summary>
    /// Delete rows using values
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<Product> DeleteFromProduct(this AdventureWorksStormContext context, IEnumerable<Product> values) => StormCrudFactory.DeleteFromSingle<Product>(context, 0, values);
    /// <summary>
    /// Insert row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IInsertInto<Product> InsertIntoProduct(this AdventureWorksStormContext context) => StormCrudFactory.InsertInto<Product>(context, 0);
    /// <summary>
    /// Update row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFrom<Product> UpdateProduct(this AdventureWorksStormContext context) => StormCrudFactory.UpdateFrom<Product>(context, 0);
    /// <summary>
    /// Update row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFromSingle<Product> UpdateProduct(this AdventureWorksStormContext context, int productID, string name, string productNumber, System.Guid rowguid) => StormCrudFactory.UpdateFromSingle<Product>(context, 0, [productID, name, productNumber, rowguid], 0);
    /// <summary>
    /// Merge row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IMergeInto<Product> MergeIntoProduct(this AdventureWorksStormContext context) => StormCrudFactory.MergeInto<Product>(context, 0);
}
