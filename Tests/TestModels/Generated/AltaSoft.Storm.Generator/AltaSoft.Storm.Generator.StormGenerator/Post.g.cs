//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Storm ORM Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using AltaSoft.Storm.Attributes;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using AltaSoft.Storm;
using AltaSoft.Storm.Crud;
using AltaSoft.Storm.Interfaces;
using AltaSoft.Storm.Exceptions;
using AltaSoft.Storm.Extensions;

#pragma warning disable IDE1006, CS0612, CS8618
// ReSharper disable InconsistentNaming

namespace AltaSoft.Storm.TestModels;

// UpdateMode: ChangeTracking
// 0. (.Posts - Table, ChangeTracking
public sealed partial record Post : IDataBindableWithKey, ITrackingObject, IEntityComparer<Post>
{
    /// <summary>
    /// Initializes a new instance with the values from the specified DbDataReader and updates the index.
    /// </summary>
    /// <param name="dr">The DbDataReader object containing the data.</param>
    /// <param name="partialLoadFlags">The PartialLoadFlags that used when loading this instance from database.</param>
    /// <param name="idx">The reference to the index.</param>
    #if NET7_0_OR_GREATER
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
    #endif
    internal Post(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        __loadingFlags = partialLoadFlags;
        Id = (int)dr.GetInt32(idx++);
        Text = (string)dr.GetAnsiString(idx++);
        CreationDate = (System.DateTime)dr.GetDateTime2(idx++);
        LastChangeDate = (System.DateTime)dr.GetDateTime2(idx++);
        Counter1 = (int?)dr.GetInt32OrNull(idx++);
        Counter2 = (int?)dr.GetInt32OrNull(idx++);
        Counter3 = (int?)dr.GetInt32OrNull(idx++);
        Counter4 = (int?)dr.GetInt32OrNull(idx++);
        Counter5 = (int?)dr.GetInt32OrNull(idx++);
        Counter6 = (int?)dr.GetInt32OrNull(idx++);
        Counter7 = (int?)dr.GetInt32OrNull(idx++);
        Counter8 = (int?)dr.GetInt32OrNull(idx++);
        Counter9 = (int?)dr.GetInt32OrNull(idx++);
        ImageCVT = (byte[])dr.GetVarBinary(idx++);
    }

    /// <inheritdoc />
    public bool KeyEquals(Post other) => Id == other.Id;

    /// <inheritdoc />
    public object __GetKeyValue() => (Id);


    /// <inheritdoc />
    public void __SetAutoIncValue(StormDbDataReader dr, int idx)
    {
    }

    /// <inheritdoc />
    public void __AddDetailRow(StormColumnDef column, object row)
    {
        // No master/detail properties
    }

    /// <summary>
    /// Represents a set of flags that can be used to specify partial loading options.
    /// </summary>
    [Flags]
    public enum PartialLoadFlags : uint
    {
        Basic = 0
    }

    /// <summary>
    /// Enum representing different options for ordering data.
    /// </summary>
    public enum OrderBy
    {
        Id = 1,
        Id_Desc = -1,
        Text = 2,
        Text_Desc = -2,
        CreationDate = 3,
        CreationDate_Desc = -3,
        LastChangeDate = 4,
        LastChangeDate_Desc = -4,
        Counter1 = 5,
        Counter1_Desc = -5,
        Counter2 = 6,
        Counter2_Desc = -6,
        Counter3 = 7,
        Counter3_Desc = -7,
        Counter4 = 8,
        Counter4_Desc = -8,
        Counter5 = 9,
        Counter5_Desc = -9,
        Counter6 = 10,
        Counter6_Desc = -10,
        Counter7 = 11,
        Counter7_Desc = -11,
        Counter8 = 12,
        Counter8_Desc = -12,
        Counter9 = 13,
        Counter9_Desc = -13,
        ImageCVT = 14,
        ImageCVT_Desc = -14
    }

    /// <summary>
    /// Do not order queried data.
    /// </summary>
    public const OrderBy[]? Unordered = default;

    /// <summary>
    /// Order queried data by the OrderBy.Id columns
    /// </summary>
    public static readonly OrderBy[] OrderByKey = new[] { OrderBy.Id };

    private uint? __loadingFlags;
    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public uint? __GetLoadingFlags() => __loadingFlags;

    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public (StormColumnDef column, object? value)[] __GetColumnValues()
    {
        var columnDefs = PostStormController.__columnDefs;

        return [
            (columnDefs[0], Id),
            (columnDefs[1], Text),
            (columnDefs[2], (DateTime)CreationDate),
            (columnDefs[3], (DateTime)LastChangeDate),
            (columnDefs[4], Counter1),
            (columnDefs[5], Counter2),
            (columnDefs[6], Counter3),
            (columnDefs[7], Counter4),
            (columnDefs[8], Counter5),
            (columnDefs[9], Counter6),
            (columnDefs[10], Counter7),
            (columnDefs[11], Counter8),
            (columnDefs[12], Counter9),
            (columnDefs[13], ImageCVT)
        ];
    }


    #region Change Tracking Support

    /// <inheritdoc />
    public  (string propertyName, IChangeTrackable? value)[] __TrackableMembers()
    {
return [];
    }
    private bool _isChangeTrackingActive;
    private ChangeTrackingStateMachine? _changeTrackingStateMachine;
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IsChangeTrackingActive() => _isChangeTrackingActive;
    /// <inheritdoc />
    public void StartChangeTracking() { (_changeTrackingStateMachine ??= new(this)).StartChangeTracking(); _isChangeTrackingActive = true; }
    /// <inheritdoc />
    public void AcceptChanges(bool stopTracking = true) { _changeTrackingStateMachine?.AcceptChanges(stopTracking); _isChangeTrackingActive = !stopTracking; }
    /// <inheritdoc />
    public bool IsDirty() => _changeTrackingStateMachine?.IsDirty() ?? false;
    /// <inheritdoc />
    public IReadOnlySet<string> __GetChangedPropertyNames() => _changeTrackingStateMachine is null ? ChangeTrackingStateMachine.EmptyStringSet : _changeTrackingStateMachine.__GetChangedPropertyNames();
    private void __PropertySet_Id(ref int newValue, ref int oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Id", newValue); }
    private void __PropertySet_Text(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Text", newValue); }
    private void __PropertySet_CreationDate(ref System.DateTime newValue, ref System.DateTime oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("CreationDate", newValue); }
    private void __PropertySet_LastChangeDate(ref System.DateTime newValue, ref System.DateTime oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("LastChangeDate", newValue); }
    private void __PropertySet_Counter1(ref int? newValue, ref int? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Counter1", newValue); }
    private void __PropertySet_Counter2(ref int? newValue, ref int? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Counter2", newValue); }
    private void __PropertySet_Counter3(ref int? newValue, ref int? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Counter3", newValue); }
    private void __PropertySet_Counter4(ref int? newValue, ref int? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Counter4", newValue); }
    private void __PropertySet_Counter5(ref int? newValue, ref int? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Counter5", newValue); }
    private void __PropertySet_Counter6(ref int? newValue, ref int? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Counter6", newValue); }
    private void __PropertySet_Counter7(ref int? newValue, ref int? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Counter7", newValue); }
    private void __PropertySet_Counter8(ref int? newValue, ref int? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Counter8", newValue); }
    private void __PropertySet_Counter9(ref int? newValue, ref int? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Counter9", newValue); }
    private void __PropertySet_ImageCVT(ref byte[] newValue, ref byte[] oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("ImageCVT", newValue); }

    #endregion Change Tracking Support
}

/// <summary>
/// 0. StormController for the Post (.Posts)
/// </summary>
[StormController(default, "Posts", typeof(Post), 0, DbObjectType.Table)]
public sealed class PostStormController : StormControllerBase
{
    public PostStormController(string? schemaName, string objectName, DbObjectType objectType) : base(schemaName, objectName, objectType)
    {
    }

    /// <inheritdoc />
    public override Type StormContext => typeof(TestStormContext);

    [System.Runtime.CompilerServices.ModuleInitializer]
    internal static void Initialize()
    {
        StormControllerBase ctrl;
        ctrl = new PostStormController(null, "Posts", DbObjectType.Table);
        StormControllerCache.Add(typeof(Post), 0, ctrl);
    }

    /// <inheritdoc />
    public override IDataBindable Create(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        return new Post(dr, partialLoadFlags, ref idx);
    }

    /// <inheritdoc />
    public override object? ReadSingleScalarValue(StormDbDataReader dr, string propertyName, ref int idx)
    {
        return propertyName switch
        {
            nameof(Post.Id) => (int)dr.GetInt32(idx++),
            nameof(Post.Text) => (string)dr.GetAnsiString(idx++),
            nameof(Post.CreationDate) => (System.DateTime)dr.GetDateTime2(idx++),
            nameof(Post.LastChangeDate) => (System.DateTime)dr.GetDateTime2(idx++),
            nameof(Post.Counter1) => (int?)dr.GetInt32OrNull(idx++),
            nameof(Post.Counter2) => (int?)dr.GetInt32OrNull(idx++),
            nameof(Post.Counter3) => (int?)dr.GetInt32OrNull(idx++),
            nameof(Post.Counter4) => (int?)dr.GetInt32OrNull(idx++),
            nameof(Post.Counter5) => (int?)dr.GetInt32OrNull(idx++),
            nameof(Post.Counter6) => (int?)dr.GetInt32OrNull(idx++),
            nameof(Post.Counter7) => (int?)dr.GetInt32OrNull(idx++),
            nameof(Post.Counter8) => (int?)dr.GetInt32OrNull(idx++),
            nameof(Post.Counter9) => (int?)dr.GetInt32OrNull(idx++),
            nameof(Post.ImageCVT) => (byte[])dr.GetVarBinary(idx++),
            _ => throw new StormException($"'{propertyName}' is not a column of the table")
        };
    }

    /// <inheritdoc />
    public override object CreateDetailRow(StormColumnDef column, StormDbDataReader dr, ref int idx)
    {
        return column.PropertyName switch
        {
            _ => throw new StormException($"'{column.PropertyName}' is not a details list")
        };
    }

    /// <summary>
    /// Array of StormColumnDef objects representing the column definitions.
    /// </summary>
    internal static readonly StormColumnDef[] __columnDefs =
    {
        new(nameof(Post.Id), null, "Id", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(int), null),
        new(nameof(Post.Text), null, "Text", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiString, -1, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(Post.CreationDate), null, "CreationDate", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.DateTime2, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(System.DateTime), null),
        new(nameof(Post.LastChangeDate), null, "LastChangeDate", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.DateTime2, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(System.DateTime), null),
        new(nameof(Post.Counter1), null, "Counter1", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(int), null),
        new(nameof(Post.Counter2), null, "Counter2", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(int), null),
        new(nameof(Post.Counter3), null, "Counter3", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(int), null),
        new(nameof(Post.Counter4), null, "Counter4", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(int), null),
        new(nameof(Post.Counter5), null, "Counter5", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(int), null),
        new(nameof(Post.Counter6), null, "Counter6", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(int), null),
        new(nameof(Post.Counter7), null, "Counter7", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(int), null),
        new(nameof(Post.Counter8), null, "Counter8", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(int), null),
        new(nameof(Post.Counter9), null, "Counter9", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, true, null, null, typeof(int), null),
        new(nameof(Post.ImageCVT), null, "ImageCVT", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.VarBinary, 4000, 0, 0, SaveAs.Default, 0, false, null, null, typeof(byte[]), null)
    };

    /// <summary>
    /// Array of StormColumnDef objects representing the key column definitions.
    /// </summary>
    internal static readonly StormColumnDef[][] __keyColumnDefs = [
        [ __columnDefs[0] ] // PK
    ];

    /// <inheritdoc />
    public override StormColumnDef[] ColumnDefs => __columnDefs;

    /// <inheritdoc />
    public override StormColumnDef[][] KeyColumnDefs => __keyColumnDefs;

    /// <inheritdoc />
    public override bool HasConcurrencyCheck => false;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAll => 0;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAllWithoutDetails => 0;

    /// <inheritdoc />
    public override object __ReadKeyValue(StormDbDataReader dr, ref int idx)
    {
        var id = (int)dr.GetInt32(idx++);
        return (id); 
    }
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override StormColumnDef? __GetAutoIncColumn() => null;

}

/// <summary>
/// StormContext methods
/// </summary>
public static partial class TestStormContextPostExt
{
    /// <summary>
    /// Select row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFrom<Post, Post.OrderBy, Post.PartialLoadFlags> SelectFromPost(this TestStormContext context) => StormCrudFactory.SelectFrom<Post, Post.OrderBy, Post.PartialLoadFlags>(context, 0);
    /// <summary>
    /// Select single row by PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFromSingle<Post, Post.OrderBy, Post.PartialLoadFlags> SelectFromPost(this TestStormContext context, int id) => StormCrudFactory.SelectFromSingle<Post, Post.OrderBy, Post.PartialLoadFlags>(context, 0, [id], 0);
    /// <summary>
    /// Select rows using non-unique index
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFrom<Post, Post.OrderBy, Post.PartialLoadFlags> SelectFromPost(this TestStormContext context, string text) => StormCrudFactory.SelectFrom<Post, Post.OrderBy, Post.PartialLoadFlags>(context, 0, [text], 1);
    /// <summary>
    /// Delete row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFrom<Post> DeleteFromPost(this TestStormContext context) => StormCrudFactory.DeleteFrom<Post>(context, 0);
    /// <summary>
    /// Delete row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<Post> DeleteFromPost(this TestStormContext context, int id) => StormCrudFactory.DeleteFromSingle<Post>(context, 0, [id], 0);
    /// <summary>
    /// Delete row using 1 value
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<Post> DeleteFromPost(this TestStormContext context, Post value) => StormCrudFactory.DeleteFromSingle<Post>(context, 0, value);
    /// <summary>
    /// Delete rows using values
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<Post> DeleteFromPost(this TestStormContext context, IEnumerable<Post> values) => StormCrudFactory.DeleteFromSingle<Post>(context, 0, values);
    /// <summary>
    /// Insert row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IInsertInto<Post> InsertIntoPost(this TestStormContext context) => StormCrudFactory.InsertInto<Post>(context, 0);
    /// <summary>
    /// Update row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFrom<Post> UpdatePost(this TestStormContext context) => StormCrudFactory.UpdateFrom<Post>(context, 0);
    /// <summary>
    /// Update row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFromSingle<Post> UpdatePost(this TestStormContext context, int id) => StormCrudFactory.UpdateFromSingle<Post>(context, 0, [id], 0);
    /// <summary>
    /// Merge row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IMergeInto<Post> MergeIntoPost(this TestStormContext context) => StormCrudFactory.MergeInto<Post>(context, 0);
}
