//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Storm ORM Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using AltaSoft.Storm.Attributes;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using AltaSoft.Storm;
using AltaSoft.Storm.Crud;
using AltaSoft.Storm.Interfaces;
using AltaSoft.Storm.Exceptions;
using AltaSoft.Storm.Extensions;

#pragma warning disable IDE1006, CS0612, CS8618
// ReSharper disable InconsistentNaming

namespace AltaSoft.Storm.TestModels;

// UpdateMode: ChangeTracking
// 0. (dbo.Cars - Table, ChangeTracking
// 1. (dbo.CarsView - View, NoUpdates
public partial record Car : IDataBindableWithKey, ITrackingObject, IEntityComparer<Car>
{
    /// <summary>
    /// Default constructor.
    /// </summary>
    public Car()
    {
    }

    /// <summary>
    /// Initializes a new instance with the values from the specified DbDataReader and updates the index.
    /// </summary>
    /// <param name="dr">The DbDataReader object containing the data.</param>
    /// <param name="partialLoadFlags">The PartialLoadFlags that used when loading this instance from database.</param>
    /// <param name="idx">The reference to the index.</param>
    #if NET7_0_OR_GREATER
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
    #endif
    protected internal Car(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        __loadingFlags = partialLoadFlags;
        CarId = (System.Guid)dr.GetGuid(idx++);
        Year = (int)dr.GetInt32(idx++);
        Model = (string)dr.GetString(idx++);
        Color = global::AltaSoft.Storm.TestModels.RgbColorExt.FromDbString(dr.GetString(idx++));
        CompressedColor = global::AltaSoft.Storm.TestModels.RgbColorExt.FromDbString(dr.AsStringCompressed(idx++));
        Color2 = Enum.Parse<AltaSoft.Storm.TestModels.BwColor>(dr.GetString(idx++));
        CompressedColor2 = Enum.Parse<AltaSoft.Storm.TestModels.BwColor>(dr.AsStringCompressed(idx++));
        StringN = dr.GetStringOrNull(idx++);
        CompressedStringN = dr.AsStringCompressedOrNull(idx++);
        String = dr.GetString(idx++);
        CompressedString = dr.AsStringCompressed(idx++);
        JsonPost = dr.AsJsonOrNull<AltaSoft.Storm.TestModels.Post>(idx++);
    }

    /// <inheritdoc />
    public bool KeyEquals(Car other) => CarId == other.CarId;

    /// <inheritdoc />
    public object __GetKeyValue() => (CarId);


    /// <inheritdoc />
    public void __SetAutoIncValue(StormDbDataReader dr, int idx)
    {
    }

    /// <inheritdoc />
    public void __AddDetailRow(StormColumnDef column, object row)
    {
        // No master/detail properties
    }

    /// <summary>
    /// Represents a set of flags that can be used to specify partial loading options.
    /// </summary>
    [Flags]
    public enum PartialLoadFlags : uint
    {
        Basic = 0,
        JsonPost = 1,
        All = Basic | JsonPost,
        AllExceptDetailTables = Basic | JsonPost
    }

    /// <summary>
    /// Enum representing different options for ordering data.
    /// </summary>
    public enum OrderBy
    {
        CarId = 1,
        CarId_Desc = -1,
        Year = 2,
        Year_Desc = -2,
        Model = 3,
        Model_Desc = -3,
        Color = 4,
        Color_Desc = -4,
        Color2 = 6,
        Color2_Desc = -6,
        StringN = 8,
        StringN_Desc = -8,
        String = 10,
        String_Desc = -10
    }

    /// <summary>
    /// Do not order queried data.
    /// </summary>
    public const OrderBy[]? Unordered = default;

    /// <summary>
    /// Order queried data by the OrderBy.CarId columns
    /// </summary>
    public static readonly OrderBy[] OrderByKey = new[] { OrderBy.CarId };

    private uint? __loadingFlags;
    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public uint? __GetLoadingFlags() => __loadingFlags;

    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public (StormColumnDef column, object? value)[] __GetColumnValues()
    {
        var columnDefs = CarStormController.__columnDefs;

        return [
            (columnDefs[0], (Guid)CarId),
            (columnDefs[1], Year),
            (columnDefs[2], Model),
            (columnDefs[3], global::AltaSoft.Storm.TestModels.RgbColorExt.ToDbString(Color)),
            (columnDefs[4], global::AltaSoft.Storm.TestModels.RgbColorExt.ToDbString(CompressedColor)),
            (columnDefs[5], Color2.ToString()),
            (columnDefs[6], CompressedColor2.ToString()),
            (columnDefs[7], StringN),
            (columnDefs[8], CompressedStringN),
            (columnDefs[9], String),
            (columnDefs[10], CompressedString),
            (columnDefs[11], (object?)JsonPost)
        ];
    }


    #region Change Tracking Support

    /// <inheritdoc />
    public virtual (string propertyName, IChangeTrackable? value)[] __TrackableMembers()
    {
return [
            (nameof(JsonPost), JsonPost)
        ];
    }
    protected bool _isChangeTrackingActive;
    protected ChangeTrackingStateMachine? _changeTrackingStateMachine;
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IsChangeTrackingActive() => _isChangeTrackingActive;
    /// <inheritdoc />
    public void StartChangeTracking() { (_changeTrackingStateMachine ??= new(this)).StartChangeTracking(); _isChangeTrackingActive = true; }
    /// <inheritdoc />
    public void AcceptChanges(bool stopTracking = true) { _changeTrackingStateMachine?.AcceptChanges(stopTracking); _isChangeTrackingActive = !stopTracking; }
    /// <inheritdoc />
    public bool IsDirty() => _changeTrackingStateMachine?.IsDirty() ?? false;
    /// <inheritdoc />
    public IReadOnlySet<string> __GetChangedPropertyNames() => _changeTrackingStateMachine is null ? ChangeTrackingStateMachine.EmptyStringSet : _changeTrackingStateMachine.__GetChangedPropertyNames();
    private void __PropertySet_CarId(ref System.Guid newValue, ref System.Guid oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("CarId", newValue); }
    private void __PropertySet_Year(ref int newValue, ref int oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Year", newValue); }
    private void __PropertySet_Model(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Model", newValue); }
    private void __PropertySet_Color(ref AltaSoft.Storm.TestModels.RgbColor newValue, ref AltaSoft.Storm.TestModels.RgbColor oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Color", newValue); }
    private void __PropertySet_CompressedColor(ref AltaSoft.Storm.TestModels.RgbColor newValue, ref AltaSoft.Storm.TestModels.RgbColor oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("CompressedColor", newValue); }
    private void __PropertySet_Color2(ref AltaSoft.Storm.TestModels.BwColor newValue, ref AltaSoft.Storm.TestModels.BwColor oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Color2", newValue); }
    private void __PropertySet_CompressedColor2(ref AltaSoft.Storm.TestModels.BwColor newValue, ref AltaSoft.Storm.TestModels.BwColor oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("CompressedColor2", newValue); }
    private void __PropertySet_StringN(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("StringN", newValue); }
    private void __PropertySet_CompressedStringN(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("CompressedStringN", newValue); }
    private void __PropertySet_String(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("String", newValue); }
    private void __PropertySet_CompressedString(ref string newValue, ref string oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("CompressedString", newValue); }
    private void __PropertySet_JsonPost(ref AltaSoft.Storm.TestModels.Post? newValue, ref AltaSoft.Storm.TestModels.Post? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("JsonPost", newValue); }

    #endregion Change Tracking Support
}

/// <summary>
/// 0. StormController for the Car (dbo.Cars)
/// 1. StormController for the Car (dbo.CarsView)
/// </summary>
[StormController("dbo", "Cars", typeof(Car), 0, DbObjectType.Table)]
[StormController("dbo", "CarsView", typeof(Car), 1, DbObjectType.View)]
public sealed class CarStormController : StormControllerBase
{
    public CarStormController(string? schemaName, string objectName, DbObjectType objectType) : base(schemaName, objectName, objectType)
    {
    }

    /// <inheritdoc />
    public override Type StormContext => typeof(TestStormContext);

    [System.Runtime.CompilerServices.ModuleInitializer]
    internal static void Initialize()
    {
        StormControllerBase ctrl;
        ctrl = new CarStormController("dbo", "Cars", DbObjectType.Table);
        StormControllerCache.Add(typeof(Car), 0, ctrl);
        ctrl = new CarStormController("dbo", "CarsView", DbObjectType.View);
        StormControllerCache.Add(typeof(Car), 1, ctrl);
    }

    /// <inheritdoc />
    public override IDataBindable Create(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        return new Car(dr, partialLoadFlags, ref idx);
    }

    /// <inheritdoc />
    public override object? ReadSingleScalarValue(StormDbDataReader dr, string propertyName, ref int idx)
    {
        return propertyName switch
        {
            nameof(Car.CarId) => (System.Guid)dr.GetGuid(idx++),
            nameof(Car.Year) => (int)dr.GetInt32(idx++),
            nameof(Car.Model) => (string)dr.GetString(idx++),
            nameof(Car.Color) => global::AltaSoft.Storm.TestModels.RgbColorExt.FromDbString(dr.GetString(idx++)),
            nameof(Car.CompressedColor) => global::AltaSoft.Storm.TestModels.RgbColorExt.FromDbString(dr.AsStringCompressed(idx++)),
            nameof(Car.Color2) => Enum.Parse<AltaSoft.Storm.TestModels.BwColor>(dr.GetString(idx++)),
            nameof(Car.CompressedColor2) => Enum.Parse<AltaSoft.Storm.TestModels.BwColor>(dr.AsStringCompressed(idx++)),
            nameof(Car.StringN) => dr.GetStringOrNull(idx++),
            nameof(Car.CompressedStringN) => dr.AsStringCompressedOrNull(idx++),
            nameof(Car.String) => dr.GetString(idx++),
            nameof(Car.CompressedString) => dr.AsStringCompressed(idx++),
            nameof(Car.JsonPost) => dr.AsJsonOrNull<AltaSoft.Storm.TestModels.Post>(idx++),
            _ => throw new StormException($"'{propertyName}' is not a column of the table")
        };
    }

    /// <inheritdoc />
    public override object CreateDetailRow(StormColumnDef column, StormDbDataReader dr, ref int idx)
    {
        return column.PropertyName switch
        {
            _ => throw new StormException($"'{column.PropertyName}' is not a details list")
        };
    }

    /// <summary>
    /// Array of StormColumnDef objects representing the column definitions.
    /// </summary>
    internal static readonly StormColumnDef[] __columnDefs =
    {
        new(nameof(Car.CarId), null, "CarId", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.Guid, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(System.Guid), null),
        new(nameof(Car.Year), null, "Year", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.Int32, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(int), null),
        new(nameof(Car.Model), null, "Model", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, -1, 0, 0, SaveAs.Default, 0, false, null, null, typeof(string), null),
        new(nameof(Car.Color), null, "Color", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, 16, 0, 0, SaveAs.String, 0, false, null, null, typeof(AltaSoft.Storm.TestModels.RgbColor), null),
        new(nameof(Car.CompressedColor), null, "CompressedColor", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.VarBinary, 50, 0, 0, SaveAs.CompressedString, 0, false, null, null, typeof(AltaSoft.Storm.TestModels.RgbColor), null),
        new(nameof(Car.Color2), null, "Color2", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, 50, 0, 0, SaveAs.String, 0, false, null, null, typeof(AltaSoft.Storm.TestModels.BwColor), null),
        new(nameof(Car.CompressedColor2), null, "CompressedColor2", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.VarBinary, 50, 0, 0, SaveAs.CompressedString, 0, false, null, null, typeof(AltaSoft.Storm.TestModels.BwColor), null),
        new(nameof(Car.StringN), null, "StringN", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, 50, 0, 0, SaveAs.String, 0, true, null, null, typeof(string), null),
        new(nameof(Car.CompressedStringN), null, "CompressedStringN", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.VarBinary, 50, 0, 0, SaveAs.CompressedString, 0, true, null, null, typeof(string), null),
        new(nameof(Car.String), null, "String", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.String, 50, 0, 0, SaveAs.String, 0, false, null, null, typeof(string), null),
        new(nameof(Car.CompressedString), null, "CompressedString", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.VarBinary, 50, 0, 0, SaveAs.CompressedString, 0, false, null, null, typeof(string), null),
        new(nameof(Car.JsonPost), null, "JsonPost", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.AnsiJson, 50, 0, 0, SaveAs.Json, 1, true, null, null, typeof(AltaSoft.Storm.TestModels.Post), typeof(AltaSoft.Storm.TestModels.Post))
    };

    /// <summary>
    /// Array of StormColumnDef objects representing the key column definitions.
    /// </summary>
    internal static readonly StormColumnDef[][] __keyColumnDefs = [
        [ __columnDefs[0] ] // PK
    ];

    /// <inheritdoc />
    public override StormColumnDef[] ColumnDefs => __columnDefs;

    /// <inheritdoc />
    public override StormColumnDef[][] KeyColumnDefs => __keyColumnDefs;

    /// <inheritdoc />
    public override bool HasConcurrencyCheck => false;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAll => (uint)Car.PartialLoadFlags.All;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAllWithoutDetails => (uint)Car.PartialLoadFlags.AllExceptDetailTables;

    /// <inheritdoc />
    public override object __ReadKeyValue(StormDbDataReader dr, ref int idx)
    {
        var carId = (System.Guid)dr.GetGuid(idx++);
        return (carId); 
    }
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override StormColumnDef? __GetAutoIncColumn() => null;

}

/// <summary>
/// StormContext methods
/// </summary>
public static partial class TestStormContextCarExt
{
    /// <summary>
    /// Select row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFrom<Car, Car.OrderBy, Car.PartialLoadFlags> SelectFromCars(this TestStormContext context) => StormCrudFactory.SelectFrom<Car, Car.OrderBy, Car.PartialLoadFlags>(context, 0);
    /// <summary>
    /// Select single row by PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFromSingle<Car, Car.OrderBy, Car.PartialLoadFlags> SelectFromCars(this TestStormContext context, System.Guid carId) => StormCrudFactory.SelectFromSingle<Car, Car.OrderBy, Car.PartialLoadFlags>(context, 0, [carId], 0);
    /// <summary>
    /// Delete row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFrom<Car> DeleteFromCars(this TestStormContext context) => StormCrudFactory.DeleteFrom<Car>(context, 0);
    /// <summary>
    /// Delete row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<Car> DeleteFromCars(this TestStormContext context, System.Guid carId) => StormCrudFactory.DeleteFromSingle<Car>(context, 0, [carId], 0);
    /// <summary>
    /// Delete row using 1 value
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<Car> DeleteFromCars(this TestStormContext context, Car value) => StormCrudFactory.DeleteFromSingle<Car>(context, 0, value);
    /// <summary>
    /// Delete rows using values
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<Car> DeleteFromCars(this TestStormContext context, IEnumerable<Car> values) => StormCrudFactory.DeleteFromSingle<Car>(context, 0, values);
    /// <summary>
    /// Insert row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IInsertInto<Car> InsertIntoCars(this TestStormContext context) => StormCrudFactory.InsertInto<Car>(context, 0);
    /// <summary>
    /// Update row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFrom<Car> UpdateCars(this TestStormContext context) => StormCrudFactory.UpdateFrom<Car>(context, 0);
    /// <summary>
    /// Update row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFromSingle<Car> UpdateCars(this TestStormContext context, System.Guid carId) => StormCrudFactory.UpdateFromSingle<Car>(context, 0, [carId], 0);
    /// <summary>
    /// Merge row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IMergeInto<Car> MergeIntoCars(this TestStormContext context) => StormCrudFactory.MergeInto<Car>(context, 0);
}
/// <summary>
/// StormContext methods
/// </summary>
public static partial class TestStormContextCarExt
{
    /// <summary>
    /// Select row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFrom<Car, Car.OrderBy, Car.PartialLoadFlags> SelectFromCar2(this TestStormContext context) => StormCrudFactory.SelectFrom<Car, Car.OrderBy, Car.PartialLoadFlags>(context, 1);
    /// <summary>
    /// Select single row by PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFromSingle<Car, Car.OrderBy, Car.PartialLoadFlags> SelectFromCar2(this TestStormContext context, System.Guid carId) => StormCrudFactory.SelectFromSingle<Car, Car.OrderBy, Car.PartialLoadFlags>(context, 1, [carId], 0);
}
