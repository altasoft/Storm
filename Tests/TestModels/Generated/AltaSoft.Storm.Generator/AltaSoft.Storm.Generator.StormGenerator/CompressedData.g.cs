//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Storm ORM Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using AltaSoft.Storm.Attributes;
using AltaSoft.Storm.TestModels.AdventureWorks;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using AltaSoft.Storm;
using AltaSoft.Storm.Crud;
using AltaSoft.Storm.Interfaces;
using AltaSoft.Storm.Exceptions;
using AltaSoft.Storm.Extensions;

#pragma warning disable IDE1006, CS0612, CS8618
// ReSharper disable InconsistentNaming

namespace AltaSoft.Storm.TestModels;

// UpdateMode: ChangeTracking
// 0. (dbo.CompressedData - Table, ChangeTracking
public partial record CompressedData : IDataBindableWithKey, ITrackingObject, IEntityComparer<CompressedData>
{
    /// <summary>
    /// Default constructor.
    /// </summary>
    public CompressedData()
    {
    }

    /// <summary>
    /// Initializes a new instance with the values from the specified DbDataReader and updates the index.
    /// </summary>
    /// <param name="dr">The DbDataReader object containing the data.</param>
    /// <param name="partialLoadFlags">The PartialLoadFlags that used when loading this instance from database.</param>
    /// <param name="idx">The reference to the index.</param>
    #if NET7_0_OR_GREATER
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
    #endif
    protected internal CompressedData(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        __loadingFlags = partialLoadFlags;
        Id = (System.Guid)dr.GetGuid(idx++);
        CompressedStringN = dr.AsStringCompressedOrNull(idx++);
        JsonCompressed = dr.AsJsonCompressed<AltaSoft.Storm.TestModels.AdventureWorks.Product>(idx++);
        XmlCompressed = dr.AsXmlCompressed<AltaSoft.Storm.TestModels.AdventureWorks.Product>(idx++);
    }

    /// <inheritdoc />
    public bool KeyEquals(CompressedData other) => Id == other.Id;

    /// <inheritdoc />
    public object __GetKeyValue() => (Id);


    /// <inheritdoc />
    public void __SetAutoIncValue(StormDbDataReader dr, int idx)
    {
    }

    /// <inheritdoc />
    public void __AddDetailRow(StormColumnDef column, object row)
    {
        // No master/detail properties
    }

    /// <summary>
    /// Represents a set of flags that can be used to specify partial loading options.
    /// </summary>
    [Flags]
    public enum PartialLoadFlags : uint
    {
        Basic = 0
    }

    /// <summary>
    /// Enum representing different options for ordering data.
    /// </summary>
    public enum OrderBy
    {
        Id = 1,
        Id_Desc = -1
    }

    /// <summary>
    /// Do not order queried data.
    /// </summary>
    public const OrderBy[]? Unordered = default;

    /// <summary>
    /// Order queried data by the OrderBy.Id columns
    /// </summary>
    public static readonly OrderBy[] OrderByKey = new[] { OrderBy.Id };

    private uint? __loadingFlags;
    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public uint? __GetLoadingFlags() => __loadingFlags;

    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public (StormColumnDef column, object? value)[] __GetColumnValues()
    {
        var columnDefs = CompressedDataStormController.__columnDefs;

        return [
            (columnDefs[0], (Guid)Id),
            (columnDefs[1], CompressedStringN),
            (columnDefs[2], JsonCompressed),
            (columnDefs[3], XmlCompressed)
        ];
    }


    #region Change Tracking Support

    /// <inheritdoc />
    public virtual (string propertyName, IChangeTrackable? value)[] __TrackableMembers()
    {
return [
            (nameof(JsonCompressed), JsonCompressed),
            (nameof(XmlCompressed), XmlCompressed)
        ];
    }
    protected bool _isChangeTrackingActive;
    protected ChangeTrackingStateMachine? _changeTrackingStateMachine;
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool IsChangeTrackingActive() => _isChangeTrackingActive;
    /// <inheritdoc />
    public void StartChangeTracking() { (_changeTrackingStateMachine ??= new(this)).StartChangeTracking(); _isChangeTrackingActive = true; }
    /// <inheritdoc />
    public void AcceptChanges(bool stopTracking = true) { _changeTrackingStateMachine?.AcceptChanges(stopTracking); _isChangeTrackingActive = !stopTracking; }
    /// <inheritdoc />
    public bool IsDirty() => _changeTrackingStateMachine?.IsDirty() ?? false;
    /// <inheritdoc />
    public IReadOnlySet<string> __GetChangedPropertyNames() => _changeTrackingStateMachine is null ? ChangeTrackingStateMachine.EmptyStringSet : _changeTrackingStateMachine.__GetChangedPropertyNames();
    private void __PropertySet_Id(ref System.Guid newValue, ref System.Guid oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("Id", newValue); }
    private void __PropertySet_CompressedStringN(ref string? newValue, ref string? oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("CompressedStringN", newValue); }
    private void __PropertySet_JsonCompressed(ref AltaSoft.Storm.TestModels.AdventureWorks.Product newValue, ref AltaSoft.Storm.TestModels.AdventureWorks.Product oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("JsonCompressed", newValue); }
    private void __PropertySet_XmlCompressed(ref AltaSoft.Storm.TestModels.AdventureWorks.Product newValue, ref AltaSoft.Storm.TestModels.AdventureWorks.Product oldValue) { if (_isChangeTrackingActive && oldValue != newValue) _changeTrackingStateMachine!.PropertyChanged("XmlCompressed", newValue); }

    #endregion Change Tracking Support
}

/// <summary>
/// 0. StormController for the CompressedData (dbo.CompressedData)
/// </summary>
[StormController("dbo", "CompressedDatas", typeof(CompressedData), 0, DbObjectType.Table)]
public sealed class CompressedDataStormController : StormControllerBase
{
    public CompressedDataStormController(string? schemaName, string objectName, DbObjectType objectType) : base(schemaName, objectName, objectType)
    {
    }

    /// <inheritdoc />
    public override Type StormContext => typeof(TestStormContext);

    [System.Runtime.CompilerServices.ModuleInitializer]
    internal static void Initialize()
    {
        StormControllerBase ctrl;
        ctrl = new CompressedDataStormController("dbo", "CompressedDatas", DbObjectType.Table);
        StormControllerCache.Add(typeof(CompressedData), 0, ctrl);
    }

    /// <inheritdoc />
    public override IDataBindable Create(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        return new CompressedData(dr, partialLoadFlags, ref idx);
    }

    /// <inheritdoc />
    public override object? ReadSingleScalarValue(StormDbDataReader dr, string propertyName, ref int idx)
    {
        return propertyName switch
        {
            nameof(CompressedData.Id) => (System.Guid)dr.GetGuid(idx++),
            nameof(CompressedData.CompressedStringN) => dr.AsStringCompressedOrNull(idx++),
            nameof(CompressedData.JsonCompressed) => dr.AsJsonCompressed<AltaSoft.Storm.TestModels.AdventureWorks.Product>(idx++),
            nameof(CompressedData.XmlCompressed) => dr.AsXmlCompressed<AltaSoft.Storm.TestModels.AdventureWorks.Product>(idx++),
            _ => throw new StormException($"'{propertyName}' is not a column of the table")
        };
    }

    /// <inheritdoc />
    public override object CreateDetailRow(StormColumnDef column, StormDbDataReader dr, ref int idx)
    {
        return column.PropertyName switch
        {
            _ => throw new StormException($"'{column.PropertyName}' is not a details list")
        };
    }

    /// <summary>
    /// Array of StormColumnDef objects representing the column definitions.
    /// </summary>
    internal static readonly StormColumnDef[] __columnDefs =
    {
        new(nameof(CompressedData.Id), null, "Id", StormColumnFlags.Key | StormColumnFlags.CanSelect | StormColumnFlags.CanInsert, UnifiedDbType.Guid, 0, 0, 0, SaveAs.Default, 0, false, null, null, typeof(System.Guid), null),
        new(nameof(CompressedData.CompressedStringN), null, "CompressedStringN", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.VarBinary, 50, 0, 0, SaveAs.CompressedString, 0, true, null, null, typeof(string), null),
        new(nameof(CompressedData.JsonCompressed), null, "JsonCompressed", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.VarBinary, -1, 0, 0, SaveAs.CompressedJson, 0, false, null, null, typeof(AltaSoft.Storm.TestModels.AdventureWorks.Product), typeof(AltaSoft.Storm.TestModels.AdventureWorks.Product)),
        new(nameof(CompressedData.XmlCompressed), null, "XmlCompressed", StormColumnFlags.CanSelect | StormColumnFlags.CanInsert | StormColumnFlags.CanUpdate, UnifiedDbType.VarBinary, -1, 0, 0, SaveAs.CompressedXml, 0, false, null, null, typeof(AltaSoft.Storm.TestModels.AdventureWorks.Product), typeof(AltaSoft.Storm.TestModels.AdventureWorks.Product))
    };

    /// <summary>
    /// Array of StormColumnDef objects representing the key column definitions.
    /// </summary>
    internal static readonly StormColumnDef[][] __keyColumnDefs = [
        [ __columnDefs[0] ] // PK
    ];

    /// <inheritdoc />
    public override StormColumnDef[] ColumnDefs => __columnDefs;

    /// <inheritdoc />
    public override StormColumnDef[][] KeyColumnDefs => __keyColumnDefs;

    /// <inheritdoc />
    public override bool HasConcurrencyCheck => false;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAll => 0;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAllWithoutDetails => 0;

    /// <inheritdoc />
    public override object __ReadKeyValue(StormDbDataReader dr, ref int idx)
    {
        var id = (System.Guid)dr.GetGuid(idx++);
        return (id); 
    }
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override StormColumnDef? __GetAutoIncColumn() => null;

}

/// <summary>
/// StormContext methods
/// </summary>
public static partial class TestStormContextCompressedDataExt
{
    /// <summary>
    /// Select row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFrom<CompressedData, CompressedData.OrderBy, CompressedData.PartialLoadFlags> SelectFromCompressedData(this TestStormContext context) => StormCrudFactory.SelectFrom<CompressedData, CompressedData.OrderBy, CompressedData.PartialLoadFlags>(context, 0);
    /// <summary>
    /// Select single row by PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ISelectFromSingle<CompressedData, CompressedData.OrderBy, CompressedData.PartialLoadFlags> SelectFromCompressedData(this TestStormContext context, System.Guid id) => StormCrudFactory.SelectFromSingle<CompressedData, CompressedData.OrderBy, CompressedData.PartialLoadFlags>(context, 0, [id], 0);
    /// <summary>
    /// Delete row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFrom<CompressedData> DeleteFromCompressedData(this TestStormContext context) => StormCrudFactory.DeleteFrom<CompressedData>(context, 0);
    /// <summary>
    /// Delete row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<CompressedData> DeleteFromCompressedData(this TestStormContext context, System.Guid id) => StormCrudFactory.DeleteFromSingle<CompressedData>(context, 0, [id], 0);
    /// <summary>
    /// Delete row using 1 value
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<CompressedData> DeleteFromCompressedData(this TestStormContext context, CompressedData value) => StormCrudFactory.DeleteFromSingle<CompressedData>(context, 0, value);
    /// <summary>
    /// Delete rows using values
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IDeleteFromSingle<CompressedData> DeleteFromCompressedData(this TestStormContext context, IEnumerable<CompressedData> values) => StormCrudFactory.DeleteFromSingle<CompressedData>(context, 0, values);
    /// <summary>
    /// Insert row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IInsertInto<CompressedData> InsertIntoCompressedData(this TestStormContext context) => StormCrudFactory.InsertInto<CompressedData>(context, 0);
    /// <summary>
    /// Update row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFrom<CompressedData> UpdateCompressedData(this TestStormContext context) => StormCrudFactory.UpdateFrom<CompressedData>(context, 0);
    /// <summary>
    /// Update row using PK
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IUpdateFromSingle<CompressedData> UpdateCompressedData(this TestStormContext context, System.Guid id) => StormCrudFactory.UpdateFromSingle<CompressedData>(context, 0, [id], 0);
    /// <summary>
    /// Merge row(s)
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IMergeInto<CompressedData> MergeIntoCompressedData(this TestStormContext context) => StormCrudFactory.MergeInto<CompressedData>(context, 0);
}
