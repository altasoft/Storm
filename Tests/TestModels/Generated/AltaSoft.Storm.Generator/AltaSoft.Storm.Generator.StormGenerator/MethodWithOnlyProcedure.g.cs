//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'AltaSoft Storm ORM Generator'.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using AltaSoft.Storm.Attributes;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using AltaSoft.Storm;
using AltaSoft.Storm.Crud;
using AltaSoft.Storm.Interfaces;
using AltaSoft.Storm.Exceptions;
using AltaSoft.Storm.Extensions;

#pragma warning disable IDE1006, CS0612, CS8618
// ReSharper disable InconsistentNaming

namespace AltaSoft.Storm.TestModels;

// UpdateMode: NoUpdates
// 0. (dbo.AddDocument - StoredProcedure, NoUpdates
public partial class MethodWithOnlyProcedure : IDataBindable
{
    /// <summary>
    /// Default constructor.
    /// </summary>
    public MethodWithOnlyProcedure()
    {
    }

    /// <summary>
    /// Initializes a new instance with the values from the specified DbDataReader and updates the index.
    /// </summary>
    /// <param name="dr">The DbDataReader object containing the data.</param>
    /// <param name="partialLoadFlags">The PartialLoadFlags that used when loading this instance from database.</param>
    /// <param name="idx">The reference to the index.</param>
    #if NET7_0_OR_GREATER
    [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
    #endif
    protected internal MethodWithOnlyProcedure(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        __loadingFlags = partialLoadFlags;
    }


    /// <inheritdoc />
    public void __SetAutoIncValue(StormDbDataReader dr, int idx)
    {
    }

    /// <inheritdoc />
    public void __AddDetailRow(StormColumnDef column, object row)
    {
        // No master/detail properties
    }

    /// <summary>
    /// Represents a set of flags that can be used to specify partial loading options.
    /// </summary>
    [Flags]
    public enum PartialLoadFlags : uint
    {
        Basic = 0
    }

    /// <summary>
    /// Enum representing different options for ordering data.
    /// </summary>
    public enum OrderBy
    {
    }

    /// <summary>
    /// Do not order queried data.
    /// </summary>
    public const OrderBy[]? Unordered = default;

    private uint? __loadingFlags;
    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public uint? __GetLoadingFlags() => __loadingFlags;

    /// <inheritdoc />
    [EditorBrowsable(EditorBrowsableState.Never)]
    public (StormColumnDef column, object? value)[] __GetColumnValues()
    {
        var columnDefs = MethodWithOnlyProcedureStormController.__columnDefs;

        return [
        ];
    }

}

/// <summary>
/// 0. StormController for the MethodWithOnlyProcedure (dbo.AddDocument)
/// </summary>
[StormController("dbo", "AddDocument", typeof(MethodWithOnlyProcedure), 0, DbObjectType.StoredProcedure)]
public sealed class MethodWithOnlyProcedureStormController : StormControllerBase
{
    public MethodWithOnlyProcedureStormController(string? schemaName, string objectName, DbObjectType objectType) : base(schemaName, objectName, objectType)
    {
    }

    /// <inheritdoc />
    public override Type StormContext => typeof(TestStormContext);

    [System.Runtime.CompilerServices.ModuleInitializer]
    internal static void Initialize()
    {
        StormControllerBase ctrl;
        ctrl = new MethodWithOnlyProcedureStormController("dbo", "AddDocument", DbObjectType.StoredProcedure);
        StormControllerCache.Add(typeof(MethodWithOnlyProcedure), 0, ctrl);
    }

    /// <inheritdoc />
    public override IDataBindable Create(StormDbDataReader dr, uint partialLoadFlags, ref int idx)
    {
        return new MethodWithOnlyProcedure(dr, partialLoadFlags, ref idx);
    }

    /// <inheritdoc />
    public override object? ReadSingleScalarValue(StormDbDataReader dr, string propertyName, ref int idx)
    {
        return propertyName switch
        {
            _ => throw new StormException($"'{propertyName}' is not a column of the table")
        };
    }

    /// <inheritdoc />
    public override object CreateDetailRow(StormColumnDef column, StormDbDataReader dr, ref int idx)
    {
        return column.PropertyName switch
        {
            _ => throw new StormException($"'{column.PropertyName}' is not a details list")
        };
    }

    /// <summary>
    /// Array of StormColumnDef objects representing the column definitions.
    /// </summary>
    internal static readonly StormColumnDef[] __columnDefs =
    {
    };

    /// <summary>
    /// Array of StormColumnDef objects representing the key column definitions.
    /// </summary>
    internal static readonly StormColumnDef[][] __keyColumnDefs = [
        [  ] // PK
    ];

    /// <inheritdoc />
    public override StormColumnDef[] ColumnDefs => __columnDefs;

    /// <inheritdoc />
    public override StormColumnDef[][] KeyColumnDefs => __keyColumnDefs;

    /// <inheritdoc />
    public override bool HasConcurrencyCheck => false;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAll => 0;
    /// <inheritdoc />
    public override uint PartialLoadFlagsAllWithoutDetails => 0;
    /// <inheritdoc />
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public override StormColumnDef? __GetAutoIncColumn() => null;

}

/// <summary>
/// StormContext methods
/// </summary>
public static partial class TestStormContextMethodWithOnlyProcedureExt
{
    /// <summary>
    /// Select row(s) from <c>Stored Procedure</c>
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static IExecuteFrom<MethodWithOnlyProcedure, ExecuteAddDocumentOutput> ExecuteAddDocument(this TestStormContext context, long recId, int userId, int debitId, int creditId, int? tariffId, decimal amount, decimal tariffAmount, int channelId, string description, string extraDescription)
    {
        var callParams = new List<StormCallParameter>(10)
        {
new("ReturnValue", UnifiedDbType.Int32, 0, 0, 0, 0, ParameterDirection.ReturnValue),
            new("@rec_id", UnifiedDbType.Int32, recId, 0, 0, 0, ParameterDirection.Output),
            new("@user_id", UnifiedDbType.Int32, userId, 0, 0, 0, ParameterDirection.Input),
            new("@debit_id", UnifiedDbType.Int32, debitId, 0, 0, 0, ParameterDirection.Input),
            new("@credit_id", UnifiedDbType.Int32, creditId, 0, 0, 0, ParameterDirection.Input),
            new("@tariff_id", UnifiedDbType.Int32, tariffId, 0, 0, 0, ParameterDirection.Input),
            new("@amount", UnifiedDbType.Decimal, amount, 0, 0, 0, ParameterDirection.Input),
            new("@tariff_amount", UnifiedDbType.Decimal, tariffAmount, 0, 0, 0, ParameterDirection.Input),
            new("@channel_id", UnifiedDbType.Int32, channelId, 0, 0, 0, ParameterDirection.Input),
            new("@descrip", UnifiedDbType.AnsiString, description, 150, 0, 0, ParameterDirection.Input),
            new("@extra_descrip", UnifiedDbType.AnsiString, extraDescription, 250, 0, 0, ParameterDirection.Input)
        };

        return StormCrudFactory.ExecuteFrom<MethodWithOnlyProcedure, ExecuteAddDocumentOutput>(context, 0, callParams, OutputWriter);

        static void OutputWriter(int rowsAffected, StormDbParameterCollection parameters, ExecuteAddDocumentOutput output)
        {
            output.RowsAffected = rowsAffected;
            output.ReturnValue = (int)parameters[0].Value;
            output.RecId = parameters["@rec_id"].Value.GetDbValue<long>();
        }
    }

    /// <summary>
    /// Output class for <see cref=" ExecuteAddDocument"/>
    /// </summary>
    public record ExecuteAddDocumentOutput : StormProcedureResult
    {
        public long RecId { get; set; }
    }

}
